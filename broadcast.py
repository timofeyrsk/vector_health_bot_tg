import os
import sys
import logging
import time
from sqlalchemy.orm import Session
from database.connection import get_db
from models.user_profile import UserProfile
from services.telegram_service import TelegramService

# --- –¢–ï–ö–°–¢ –°–û–û–ë–©–ï–ù–ò–Ø –î–õ–Ø –†–ê–°–°–´–õ–ö–ò ---
MESSAGE_TEXT = """
üëã *–ü—Ä–∏–≤–µ—Ç! –£ –Ω–∞—Å –±–æ–ª—å—à–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ!*

–ú—ã –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ –∏–∑—É—á–∏–ª–∏ –≤–∞—à–∏ –æ—Ç–∑—ã–≤—ã –∏ –≤–Ω–µ—Å–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∫–ª—é—á–µ–≤—ã—Ö —É–ª—É—á—à–µ–Ω–∏–π, —á—Ç–æ–±—ã —Å–¥–µ–ª–∞—Ç—å –±–æ—Ç–∞ –µ—â–µ —É–º–Ω–µ–µ –∏ —É–¥–æ–±–Ω–µ–µ.

–í–æ—Ç —á—Ç–æ –Ω–æ–≤–æ–≥–æ:

üìä **–î–Ω–µ–≤–Ω–∞—è —Å–≤–æ–¥–∫–∞ —Å—Ç–∞–ª–∞ –ø–æ–¥—Ä–æ–±–Ω–µ–µ!**
–¢–µ–ø–µ—Ä—å –≤ –æ—Ç—á–µ—Ç–µ –≤—ã –≤–∏–¥–∏—Ç–µ –ø–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Å—ä–µ–¥–µ–Ω–Ω—ã—Ö –∑–∞ –¥–µ–Ω—å –±–ª—é–¥, –∞ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –æ—Ç –ò–ò —Å—Ç–∞–ª–∏ –µ—â–µ —Ç–æ—á–Ω–µ–µ, —Ç–∞–∫ –∫–∞–∫ —Ñ–æ—Ä–º–∏—Ä—É—é—Ç—Å—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–∞—à–µ–≥–æ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞.

üß† **–ë–æ—Ç —Ç–µ–ø–µ—Ä—å "–ø–æ–º–Ω–∏—Ç" –≤–∞—à—É –∏—Å—Ç–æ—Ä–∏—é –ø–∏—Ç–∞–Ω–∏—è!**
–ó–∞–¥–∞–≤–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å—ã –≤—Ä–æ–¥–µ "–ß—Ç–æ —è –µ–ª –≤—á–µ—Ä–∞?" –∏–ª–∏ "–ü–æ—á–µ–º—É —è –ø—Ä–µ–≤—ã—Å–∏–ª –Ω–æ—Ä–º—É –ø–æ –∂–∏—Ä–∞–º?", –∏ –ò–ò –æ—Ç–≤–µ—Ç–∏—Ç, –æ—Å–Ω–æ–≤—ã–≤–∞—è—Å—å –Ω–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –≤–∞—à–µ–≥–æ –¥–Ω–µ–≤–Ω–∏–∫–∞. –í–∞—à–∏ –±–µ—Å–µ–¥—ã —Å—Ç–∞–ª–∏ –ø–æ-–Ω–∞—Å—Ç–æ—è—à–µ–º—É –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–º–∏.

‚è∞ **–£–ø—Ä–∞–≤–ª—è–π—Ç–µ –≤—Ä–µ–º–µ–Ω–µ–º –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –æ—Ç—á–µ—Ç–æ–≤!**
–•–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —Å–≤–æ–¥–∫—É –≤ —É–¥–æ–±–Ω–æ–µ –¥–ª—è –≤–∞—Å –≤—Ä–µ–º—è? –ü—Ä–æ—Å—Ç–æ –∑–∞–π–¥–∏—Ç–µ –≤ `‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏` -> `–í—Ä–µ–º—è –æ—Ç—á—ë—Ç–∞` –∏ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –µ–≥–æ (–ø–æ –ú–°–ö).

–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –≤—ã —Å –Ω–∞–º–∏! –ú—ã –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –¥–µ–ª–∞—Ç—å –±–æ—Ç–∞ –ª—É—á—à–µ –¥–ª—è –≤–∞—Å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å!
"""
# -----------------------------------------

logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

def send_broadcast():
    logging.info("Starting broadcast...")
    db: Session = next(get_db())
    telegram_service = TelegramService()
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ chat_id –∏–∑ –±–∞–∑—ã
        users = db.query(UserProfile.chat_id).filter(UserProfile.chat_id.isnot(None)).all()
        chat_ids = [user.chat_id for user in users]
        
        if not chat_ids:
            logging.warning("No users with chat_id found.")
            return

        logging.info(f"Found {len(chat_ids)} users to message.")
        
        success_count = 0
        fail_count = 0
        
        for i, chat_id in enumerate(chat_ids):
            try:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –æ—Ç–ø—Ä–∞–≤–∫–∏
                telegram_service.send_message(chat_id, MESSAGE_TEXT)
                logging.info(f"[{i+1}/{len(chat_ids)}] Message sent to chat_id: {chat_id}")
                success_count += 1
            except Exception as e:
                logging.error(f"Failed to send to chat_id: {chat_id}. Error: {e}")
                fail_count += 1
            
            # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –ª–∏–º–∏—Ç–æ–≤ Telegram (1 —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ ~33 –º—Å)
            time.sleep(0.04)

        logging.info("Broadcast finished.")
        logging.info(f"Successfully sent: {success_count}")
        logging.info(f"Failed to send: {fail_count}")

    finally:
        db.close()

if __name__ == "__main__":
    send_broadcast()