import requests
import json
import logging
from typing import Dict, Optional
from datetime import datetime, date, time
from config.settings import Config
from services.openai_service import OpenAIService
from services.health_service import HealthService
from services.terra_service import TerraService
from database.connection import get_db
from utils.telegram_utils import parse_markdown_to_entities, clean_keyboard_markup
from utils.user_states import state_manager, States

logger = logging.getLogger(__name__)

class TelegramService:
    def __init__(self):
        """Initialize Telegram service"""
        self.bot_token = Config.TELEGRAM_BOT_TOKEN
        self.base_url = f"https://api.telegram.org/bot{self.bot_token}"
        self.openai_service = OpenAIService()
        self.terra_service = TerraService()
    
    def process_update(self, update: Dict) -> Dict:
        """Process incoming Telegram update"""
        try:
            if 'message' in update:
                return self._process_message(update['message'])
            elif 'callback_query' in update:
                return self._process_callback_query(update['callback_query'])
            else:
                logger.warning(f"Unknown update type: {update.keys()}")
                return {'status': 'ignored', 'reason': 'Unknown update type'}
                
        except Exception as e:
            logger.error(f"Error processing Telegram update: {str(e)}")
            return {'status': 'error', 'error': str(e)}
    
    def _process_message(self, message: Dict) -> Dict:
        """Process incoming message"""
        try:
            user_id = message['from']['id']
            chat_id = message['chat']['id']
            
            # Handle different message types
            if 'text' in message:
                return self._handle_text_message(user_id, chat_id, message['text'])
            elif 'photo' in message:
                return self._handle_photo_message(user_id, chat_id, message['photo'])
            else:
                self.send_message(chat_id, "–Ø –º–æ–≥—É –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏.")
                return {'status': 'unsupported_message_type'}
                
        except Exception as e:
            logger.error(f"Error processing message: {str(e)}")
            return {'status': 'error', 'error': str(e)}
    
    def _handle_text_message(self, user_id: int, chat_id: int, text: str) -> Dict:
        """Handle text messages"""
        db = None
        try:
            db = next(get_db())
            health_service = HealthService(db)
            
            # Check if user exists
            user_profile = health_service.get_user_profile(user_id)
            
            if text.startswith('/start'):
                return self._handle_start_command(user_id, chat_id, user_profile)
            elif text.startswith('/connect_wearable'):
                return self._handle_connect_wearable_command(user_id, chat_id, user_profile)
            elif text.startswith('/summary'):
                return self._handle_summary_command(user_id, chat_id, user_profile)
            elif text.startswith('/help'):
                return self._handle_help_command(chat_id)
            elif not user_profile:
                # User not onboarded, start onboarding
                return self._handle_start_command(user_id, chat_id, None)
            elif user_profile and not self._is_onboarding_complete(user_profile):
                # Continue onboarding
                return self._handle_onboarding_step(user_id, chat_id, text, user_profile)
            else:
                # Check if user is in a dialog state
                current_state = state_manager.get_state_name(user_id)
                if current_state:
                    return self._handle_dialog_state(user_id, chat_id, text, current_state, user_profile)
                else:
                    # Regular message - could be food logging or Q&A
                    return self._handle_regular_message(user_id, chat_id, text, user_profile)
                
        except Exception as e:
            logger.error(f"Error handling text message: {str(e)}")
            return {'status': 'error', 'error': str(e)}
        finally:
            # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
            if db:
                db.close()
    
    def _handle_photo_message(self, user_id: int, chat_id: int, photos: list) -> Dict:
        """Handle photo messages for food logging"""
        db = None
        try:
            db = next(get_db())
            health_service = HealthService(db)
            user_profile = health_service.get_user_profile(user_id)
            
            if not user_profile or not self._is_onboarding_complete(user_profile):
                message = "‚ùå *–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω*\\n\\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –∑–∞–≤–µ—Ä—à–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫—É –ø—Ä–æ—Ñ–∏–ª—è, –æ—Ç–ø—Ä–∞–≤–∏–≤ /start"
                keyboard = [[{'text': 'üöÄ –ù–∞—á–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫—É', 'callback_data': 'start_onboarding'}]]
                self.send_message_with_keyboard(chat_id, message, keyboard)
                return {'status': 'user_not_onboarded'}
            
            # Get the highest resolution photo
            photo = max(photos, key=lambda x: x['width'] * x['height'])
            file_id = photo['file_id']
            
            # Get file URL from Telegram
            file_info = self._get_file_info(file_id)
            if not file_info:
                message = "‚ùå *–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–æ—Ç–æ*\\n\\n–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤–∞—à—É —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
                keyboard = [[{'text': 'üéØ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'callback_data': 'main_menu'}]]
                self.send_message_with_keyboard(chat_id, message, keyboard)
                return {'status': 'error', 'reason': 'Could not get file info'}
            
            file_url = f"https://api.telegram.org/file/bot{self.bot_token}/{file_info['file_path']}"
            
            # Analyze food from photo using the existing image analysis function
            self.send_message(chat_id, "üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –≤–∞—à—É —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –µ–¥—ã...")
            
            try:
                food_data = self.openai_service.analyze_food_from_image(file_url)
                
                # Log the food
                food_log = health_service.log_food_from_photo(user_id, food_data, file_url)
                
                # Send confirmation message
                message = f"""‚úÖ *–ï–¥–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω–∞!*

üçΩÔ∏è {food_data['dish_name']}
üìä *–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–∏—Ç–∞–Ω–∏–∏:*
‚Ä¢ –ö–∞–ª–æ—Ä–∏–∏: {food_data['calories']} –∫–∫–∞–ª
‚Ä¢ –ë–µ–ª–∫–∏: {food_data['protein_g']}–≥
‚Ä¢ –ñ–∏—Ä—ã: {food_data['fat_g']}–≥
‚Ä¢ –£–≥–ª–µ–≤–æ–¥—ã: {food_data['carbs_g']}–≥
‚Ä¢ –í–µ—Å: ~{food_data['estimated_weight_g']}–≥

üìù *–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã:* {food_data['estimated_ingredients']}

–ß—Ç–æ –¥–∞–ª—å—à–µ?"""
                
                keyboard = [
                    [
                        {'text': 'üì∏ –ê–Ω–∞–ª–∏–∑ –µ—â–µ —Ñ–æ—Ç–æ', 'callback_data': 'photo_analysis'},
                        {'text': 'üìä –î–Ω–µ–≤–Ω–∞—è —Å–≤–æ–¥–∫–∞', 'callback_data': 'summary'}
                    ],
                    [{'text': 'üéØ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'callback_data': 'main_menu'}]
                ]
                
                self.send_message_with_keyboard(chat_id, message, keyboard)
                return {'status': 'success', 'food_log_id': str(food_log.log_id)}
                
            except Exception as e:
                logger.error(f"Error analyzing food photo: {str(e)}")
                message = "‚ùå *–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ñ–æ—Ç–æ*\\n\\n–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –≤–∞—à—É —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –µ–¥—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ–ø–∏—Å–∞—Ç—å –µ–µ —Ç–µ–∫—Å—Ç–æ–º."
                keyboard = [
                    [{'text': 'üìù –û–ø–∏—Å–∞—Ç—å —Ç–µ–∫—Å—Ç–æ–º', 'callback_data': 'food_log'}],
                    [{'text': 'üéØ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'callback_data': 'main_menu'}]
                ]
                self.send_message_with_keyboard(chat_id, message, keyboard)
                return {'status': 'error', 'error': str(e)}
                
        except Exception as e:
            logger.error(f"Error handling photo message: {str(e)}")
            message = "‚ùå *–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏*\\n\\n–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            keyboard = [[{'text': 'üéØ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'callback_data': 'main_menu'}]]
            self.send_message_with_keyboard(chat_id, message, keyboard)
            return {'status': 'error', 'error': str(e)}
        finally:
            # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
            if db:
                db.close()
    
    def _handle_start_command(self, user_id: int, chat_id: int, user_profile) -> Dict:
        """Handle /start command and begin onboarding"""
        db = None
        try:
            if user_profile and self._is_onboarding_complete(user_profile):
                # Show main menu using unified function
                return self.send_main_menu_message(chat_id, user_id)
            else:
                message = """üëã *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Vector-Health AI Nutritionist!*

–Ø –≤–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ò–ò-–Ω—É—Ç—Ä–∏—Ü–∏–æ–ª–æ–≥. –Ø –ø–æ–º–æ–≥—É –≤–∞–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –ø–∏—Ç–∞–Ω–∏–µ, –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–∏–µ–º—ã –ø–∏—â–∏ –∏ –¥–æ—Å—Ç–∏–≥–∞—Ç—å –≤–∞—à–∏—Ö —Ü–µ–ª–µ–π –≤ –æ–±–ª–∞—Å—Ç–∏ –∑–¥–æ—Ä–æ–≤—å—è.

–î–∞–≤–∞–π—Ç–µ –Ω–∞—á–Ω–µ–º —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–∞—à–µ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è. –ö–∞–∫–æ–π —É –≤–∞—Å –ø–æ–ª?
–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–≤–µ—Ç—å—Ç–µ: *–ú—É–∂—Å–∫–æ–π* –∏–ª–∏ *–ñ–µ–Ω—Å–∫–∏–π*"""
                
                # Create or update user profile to start onboarding
                db = next(get_db())
                health_service = HealthService(db)
                if not user_profile:
                    health_service.create_user_profile(user_id, chat_id)
                
                self.send_message(chat_id, message)
            
            return {'status': 'success', 'action': 'onboarding_started'}
            
        except Exception as e:
            logger.error(f"Error handling start command: {str(e)}")
            return {'status': 'error', 'error': str(e)}
        finally:
            # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
            if db:
                db.close()
    
    def _handle_connect_wearable_command(self, user_id: int, chat_id: int, user_profile) -> Dict:
        """Handle /connect_wearable command"""
        try:
            if not user_profile:
                message = "‚ùå *–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω*\\n\\n–°–Ω–∞—á–∞–ª–∞ –∑–∞–≤–µ—Ä—à–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫—É –ø—Ä–æ—Ñ–∏–ª—è, –æ—Ç–ø—Ä–∞–≤–∏–≤ /start"
                keyboard = [[{'text': 'üöÄ –ù–∞—á–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫—É', 'callback_data': 'start_onboarding'}]]
                self.send_message_with_keyboard(chat_id, message, keyboard)
                return {'status': 'user_not_found'}
            
            # Generate Terra auth URL
            auth_url = self.terra_service.generate_auth_url(user_id)
            
            message = f"""üîó *–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Ñ–∏—Ç–Ω–µ—Å-—Ç—Ä–µ–∫–µ—Ä–∞*

–ü–æ–¥–∫–ª—é—á–∏—Ç–µ –≤–∞—à —Ñ–∏—Ç–Ω–µ—Å-—Ç—Ä–µ–∫–µ—Ä –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∏ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª–Ω–æ–π –∫–∞—Ä—Ç–∏–Ω—ã –≤–∞—à–µ–≥–æ –∑–¥–æ—Ä–æ–≤—å—è.

üì± *–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞:*
‚Ä¢ Garmin
‚Ä¢ Fitbit
‚Ä¢ Oura Ring
‚Ä¢ Withings
‚Ä¢ Apple Health
‚Ä¢ Google Fit

üîó –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:"""
            
            keyboard = [
                [{'text': 'üîó –ü–æ–¥–∫–ª—é—á–∏—Ç—å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ', 'url': auth_url}],
                [{'text': '‚ÑπÔ∏è –ü–æ–¥—Ä–æ–±–Ω–µ–µ –æ —Ç—Ä–µ–∫–µ—Ä–∞—Ö', 'callback_data': 'help_wearables'}],
                [{'text': 'üéØ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'callback_data': 'main_menu'}]
            ]
            
            self.send_message_with_keyboard(chat_id, message, keyboard)
            return {'status': 'success', 'auth_url': auth_url}
            
        except Exception as e:
            logger.error(f"Error handling connect wearable command: {str(e)}")
            message = "‚ùå *–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è*\\n\\n–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—Å—ã–ª–∫–∏ –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            keyboard = [[{'text': 'üéØ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'callback_data': 'main_menu'}]]
            self.send_message_with_keyboard(chat_id, message, keyboard)
            return {'status': 'error', 'error': str(e)}
    
    def _handle_summary_command(self, user_id: int, chat_id: int, user_profile) -> Dict:
        """Handle /summary command"""
        db = None
        try:
            if not user_profile:
                message = "‚ùå *–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω*\\n\\n–°–Ω–∞—á–∞–ª–∞ –∑–∞–≤–µ—Ä—à–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫—É –ø—Ä–æ—Ñ–∏–ª—è, –æ—Ç–ø—Ä–∞–≤–∏–≤ /start"
                keyboard = [[{'text': 'üöÄ –ù–∞—á–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫—É', 'callback_data': 'start_onboarding'}]]
                self.send_message_with_keyboard(chat_id, message, keyboard)
                return {'status': 'user_not_found'}
            
            db = next(get_db())
            health_service = HealthService(db)
            
            # Get daily summary using new universal function
            summary_data = health_service.generate_report(user_id, 'daily')
            
            if not summary_data:
                message = "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
                keyboard = self._get_back_keyboard()
                self.edit_message_with_keyboard(chat_id, message_id, message, keyboard)
                return {'status': 'error', 'reason': 'No data available'}
            
            # Generate AI report
            report = self.openai_service.generate_report(summary_data, 'daily')
            
            # Combine report and options in one message
            message = f"üìä *–î–Ω–µ–≤–Ω–æ–π –æ—Ç—á–µ—Ç*\n\n{report}\n\n–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–ø—Ü–∏–∏:"
            
            keyboard = [
                [
                    {'text': 'üìà –ù–µ–¥–µ–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç', 'callback_data': 'weekly_summary'}
                ],
                [
                    {'text': 'üéØ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'callback_data': 'main_menu'}
                ]
            ]
            
            self.edit_message_with_keyboard(chat_id, message_id, message, keyboard)
            return {'status': 'success', 'summary': summary_data}
            
        except Exception as e:
            logger.error(f"Error handling summary command: {str(e)}")
            message = "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            keyboard = self._get_back_keyboard()
            self.edit_message_with_keyboard(chat_id, message_id, message, keyboard)
            return {'status': 'error', 'error': str(e)}
        finally:
            # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
            if db:
                db.close()
    
    def _handle_help_command(self, chat_id: int) -> Dict:
        """Handle /help command"""
        message = """‚ÑπÔ∏è *Vector-Health AI Nutritionist - –ü–æ–º–æ—â—å*

ü§ñ –Ø –≤–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ò–ò-–Ω—É—Ç—Ä–∏—Ü–∏–æ–ª–æ–≥, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–∂–µ—Ç –≤–∞–º –¥–æ—Å—Ç–∏—á—å –≤–∞—à–∏—Ö —Ü–µ–ª–µ–π –≤ –æ–±–ª–∞—Å—Ç–∏ –∑–¥–æ—Ä–æ–≤—å—è.

üìã *–ß—Ç–æ —É–º–µ–µ—Ç –±–æ—Ç:*
‚Ä¢ üçΩÔ∏è –ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –µ–¥—É –ø–æ —Ñ–æ—Ç–æ –∏ –æ–ø–∏—Å–∞–Ω–∏—é
‚Ä¢ üìä –í–µ—Å—Ç–∏ –¥–Ω–µ–≤–Ω–∏–∫ –ø–∏—Ç–∞–Ω–∏—è
‚Ä¢ ‚ùì –û—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –æ –ø–∏—Ç–∞–Ω–∏–∏
‚Ä¢ üìà –°–æ–∑–¥–∞–≤–∞—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –æ—Ç—á–µ—Ç—ã
‚Ä¢ üîó –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å—Å—è —Å —Ñ–∏—Ç–Ω–µ—Å-—Ç—Ä–µ–∫–µ—Ä–∞–º–∏

üí° *–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:*
‚Ä¢ –û—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ —Ñ–æ—Ç–æ –µ–¥—ã –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
‚Ä¢ –û–ø–∏—Å—ã–≤–∞–π—Ç–µ –µ–¥—É —Ç–µ–∫—Å—Ç–æ–º
‚Ä¢ –ó–∞–¥–∞–≤–∞–π—Ç–µ –ª—é–±—ã–µ –≤–æ–ø—Ä–æ—Å—ã –æ –ø–∏—Ç–∞–Ω–∏–∏
‚Ä¢ –ü–æ–ª—É—á–∞–π—Ç–µ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –æ—Ç—á–µ—Ç—ã

üïê –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –æ—Ç—á–µ—Ç—ã –æ—Ç–ø—Ä–∞–≤–ª—è—é—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤ 20:00

–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏:"""
        
        keyboard = [
            [
                {'text': 'üçΩÔ∏è –ó–∞–ø–∏—Å—å –µ–¥—ã', 'callback_data': 'help_food_log'},
                {'text': 'üìä –û—Ç—á–µ—Ç—ã', 'callback_data': 'help_reports'}
            ],
            [
                {'text': '‚ùì –í–æ–ø—Ä–æ—Å—ã', 'callback_data': 'help_questions'},
                {'text': 'üîó –¢—Ä–µ–∫–µ—Ä—ã', 'callback_data': 'help_wearables'}
            ],
            [
                {'text': 'üéØ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'callback_data': 'main_menu'}
            ]
        ]
        
        self.send_message_with_keyboard(chat_id, message, keyboard)
        return {'status': 'success', 'action': 'help_sent'}
    
    def _handle_onboarding_step(self, user_id: int, chat_id: int, text: str, user_profile) -> Dict:
        """Handle onboarding steps"""
        db = None
        try:
            db = next(get_db())
            health_service = HealthService(db)
            
            # Determine current onboarding step based on what's missing
            if not user_profile.gender:
                return self._handle_gender_input(health_service, user_id, chat_id, text)
            elif not user_profile.age:
                return self._handle_age_input(health_service, user_id, chat_id, text)
            elif not user_profile.height_cm:
                return self._handle_height_input(health_service, user_id, chat_id, text)
            elif not user_profile.current_weight_kg:
                return self._handle_current_weight_input(health_service, user_id, chat_id, text)
            elif not user_profile.goal:
                return self._handle_goal_input(health_service, user_id, chat_id, text)
            elif not user_profile.target_weight_kg:
                return self._handle_target_weight_input(health_service, user_id, chat_id, text)
            elif not user_profile.activity_level:
                return self._handle_activity_level_input(health_service, user_id, chat_id, text)
            else:
                # Onboarding complete, calculate targets
                health_service.calculate_user_targets(user_id)
                self.send_message(chat_id, """üéâ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!

–í–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω –ø–∏—Ç–∞–Ω–∏—è –≥–æ—Ç–æ–≤. –Ø —Ä–∞—Å—Å—á–∏—Ç–∞–ª –≤–∞—à–∏ –¥–Ω–µ–≤–Ω—ã–µ –Ω–æ—Ä–º—ã –∫–∞–ª–æ—Ä–∏–π –∏ –º–∞–∫—Ä–æ–Ω—É—Ç—Ä–∏–µ–Ω—Ç–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–∞—à–∏—Ö —Ü–µ–ª–µ–π.

–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ:
üì∏ –û—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –ø—Ä–∏–µ–º–æ–≤ –ø–∏—â–∏ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –∑–∞–ø–∏—Å–∏
üìù –û–ø–∏—Å—ã–≤–∞—Ç—å –µ–¥—É —Ç–µ–∫—Å—Ç–æ–º
üìä –ü–æ–ª—É—á–∞—Ç—å –¥–Ω–µ–≤–Ω—ã–µ –æ—Ç—á–µ—Ç—ã —Å –ø–æ–º–æ—â—å—é /summary
üîó –ü–æ–¥–∫–ª—é—á–∞—Ç—å –Ω–æ—Å–∏–º—ã–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ —Å –ø–æ–º–æ—â—å—é /connect_wearable

–î–∞–≤–∞–π—Ç–µ –Ω–∞—á–Ω–µ–º –≤–∞—à –ø—É—Ç—å –∫ –∑–¥–æ—Ä–æ–≤—å—é! –û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –∏–ª–∏ –æ–ø–∏—Å–∞–Ω–∏–µ –≤–∞—à–µ–≥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –ø—Ä–∏–µ–º–∞ –ø–∏—â–∏.""")
                return {'status': 'success', 'action': 'onboarding_complete'}
                
        except Exception as e:
            logger.error(f"Error handling onboarding step: {str(e)}")
            return {'status': 'error', 'error': str(e)}
        finally:
            # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
            if db:
                db.close()
    
    def _handle_regular_message(self, user_id: int, chat_id: int, text: str, user_profile) -> Dict:
        """Handle regular messages using unified AI processing"""
        db = None
        try:
            # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_context = None
            if user_profile:
                db = next(get_db())
                health_service = HealthService(db)
                
                user_context = {
                    'goal': user_profile.goal,
                    'age': user_profile.age,
                    'gender': user_profile.gender,
                    'daily_calorie_target': user_profile.daily_calorie_target,
                    'daily_protein_target_g': user_profile.daily_protein_target_g,
                    'daily_fat_target_g': user_profile.daily_fat_target_g,
                    'daily_carbs_target_g': user_profile.daily_carbs_target_g
                }
                
                # –ï—Å–ª–∏ –≤–æ–ø—Ä–æ—Å –º–æ–∂–µ—Ç –∫–∞—Å–∞—Ç—å—Å—è –ª–∏—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö, –¥–æ–±–∞–≤–ª—è–µ–º –Ω–µ–¥–∞–≤–Ω–∏–µ –ª–æ–≥–∏
                if any(word in text.lower() for word in ['–º–æ–π', '–º–æ—è', '–º–æ–µ', '—è', '—Å–µ–≥–æ–¥–Ω—è', '–≤—á–µ—Ä–∞', '–Ω–µ–¥–µ–ª—è']):
                    from datetime import date
                    summary = health_service.get_daily_summary(user_id, date.today())
                    user_context['recent_data'] = summary
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç–æ–º, —á—Ç–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º
            self.send_message(chat_id, "ü§î –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ...")
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
            result = self.openai_service.process_user_message(text, user_context)
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –Ω–∞–º–µ—Ä–µ–Ω–∏—è
            if result['intent'] == 'food_log':
                return self._handle_food_log_result(user_id, chat_id, text, result['analysis'])
            elif result['intent'] == 'nutrition_question':
                return self._handle_nutrition_question_result(chat_id, result['answer'])
            else:
                logger.error(f"Unknown intent: {result['intent']}")
                message = "‚ùå *–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏*\\n\\n–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
                keyboard = [[{'text': 'üéØ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'callback_data': 'main_menu'}]]
                self.send_message_with_keyboard(chat_id, message, keyboard)
                return {'status': 'error', 'error': f"Unknown intent: {result['intent']}"}
                
        except ValueError as e:
            logger.error(f"Value error in message processing: {str(e)}")
            message = "‚ùå *–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞*\\n\\n–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –≤–∞—à–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
            keyboard = [[{'text': 'üéØ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'callback_data': 'main_menu'}]]
            self.send_message_with_keyboard(chat_id, message, keyboard)
            return {'status': 'error', 'error': str(e)}
        except Exception as e:
            logger.error(f"Error handling regular message: {str(e)}")
            message = "‚ùå *–í—Ä–µ–º–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞*\\n\\n–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –≤—Ä–µ–º–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            keyboard = [[{'text': 'üéØ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'callback_data': 'main_menu'}]]
            self.send_message_with_keyboard(chat_id, message, keyboard)
            return {'status': 'error', 'error': str(e)}
        finally:
            # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
            if db:
                db.close()
    
    def _handle_food_log_result(self, user_id: int, chat_id: int, original_text: str, food_analysis: Dict) -> Dict:
        """Handle food log result from unified AI processing"""
        try:
            # Log the food to database
            db = next(get_db())
            health_service = HealthService(db)
            food_log = health_service.log_food_from_text(user_id, original_text, food_analysis)
            
            # Send confirmation message
            message = f"""‚úÖ *–ï–¥–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω–∞!*

üçΩÔ∏è {food_analysis['dish_name']}
üìä *–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–∏—Ç–∞–Ω–∏–∏:*
‚Ä¢ –ö–∞–ª–æ—Ä–∏–∏: {food_analysis['calories']} –∫–∫–∞–ª
‚Ä¢ –ë–µ–ª–∫–∏: {food_analysis['protein_g']}–≥
‚Ä¢ –ñ–∏—Ä—ã: {food_analysis['fat_g']}–≥
‚Ä¢ –£–≥–ª–µ–≤–æ–¥—ã: {food_analysis['carbs_g']}–≥
‚Ä¢ –í–µ—Å: ~{food_analysis['estimated_weight_g']}–≥

üìù *–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã:* {food_analysis['estimated_ingredients']}

–ß—Ç–æ –¥–∞–ª—å—à–µ?"""
            
            keyboard = [
                [
                    {'text': 'üçΩÔ∏è –ó–∞–ø–∏—Å–∞—Ç—å –µ—â–µ', 'callback_data': 'food_log'},
                    {'text': 'üìä –î–Ω–µ–≤–Ω–∞—è —Å–≤–æ–¥–∫–∞', 'callback_data': 'summary'}
                ],
                [{'text': 'üéØ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'callback_data': 'main_menu'}]
            ]
            
            self.send_message_with_keyboard(chat_id, message, keyboard)
            return {'status': 'success', 'food_log_id': str(food_log.log_id)}
            
        except Exception as e:
            logger.error(f"Error handling food log result: {str(e)}")
            message = "‚ùå *–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è*\\n\\n–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–∏ –µ–¥—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
            keyboard = [[{'text': 'üéØ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'callback_data': 'main_menu'}]]
            self.send_message_with_keyboard(chat_id, message, keyboard)
            return {'status': 'error', 'error': str(e)}
    
    def _handle_nutrition_question_result(self, chat_id: int, answer: str) -> Dict:
        """Handle nutrition question result from unified AI processing"""
        try:
            # Send AI answer using HTML formatting to avoid MarkdownV2 issues
            self.send_ai_message(chat_id, f"‚ùì *–û—Ç–≤–µ—Ç –Ω–∞ –≤–∞—à –≤–æ–ø—Ä–æ—Å:*\\n\\n{answer}")
            
            # Send follow-up message with navigation
            follow_up_message = """üí° *–ï—Å—Ç—å –µ—â–µ –≤–æ–ø—Ä–æ—Å—ã?*

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"""
            
            keyboard = [
                [
                    {'text': '‚ùì –ó–∞–¥–∞—Ç—å –µ—â–µ –≤–æ–ø—Ä–æ—Å', 'callback_data': 'nutrition_question'},
                    {'text': 'üçΩÔ∏è –ó–∞–ø–∏—Å–∞—Ç—å –µ–¥—É', 'callback_data': 'food_log'}
                ],
                [{'text': 'üéØ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'callback_data': 'main_menu'}]
            ]
            
            self.send_message_with_keyboard(chat_id, follow_up_message, keyboard)
            return {'status': 'success', 'answer': answer}
            
        except Exception as e:
            logger.error(f"Error handling nutrition question result: {str(e)}")
            message = "‚ùå *–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏*\\n\\n–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç–≤–µ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            keyboard = [[{'text': 'üéØ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'callback_data': 'main_menu'}]]
            self.send_message_with_keyboard(chat_id, message, keyboard)
            return {'status': 'error', 'error': str(e)}
    

    
    # Onboarding helper methods
    def _handle_gender_input(self, health_service, user_id: int, chat_id: int, text: str) -> Dict:
        gender = text.lower().strip()
        if gender in ['–º—É–∂—Å–∫–æ–π', '–º', '–º—É–∂—á–∏–Ω–∞', 'male', 'm', 'man']:
            health_service.update_user_profile(user_id, {'gender': 'male'})
            self.send_message(chat_id, "–û—Ç–ª–∏—á–Ω–æ! –°–∫–æ–ª—å–∫–æ –≤–∞–º –ª–µ—Ç? (–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ)")
        elif gender in ['–∂–µ–Ω—Å–∫–∏–π', '–∂', '–∂–µ–Ω—â–∏–Ω–∞', 'female', 'f', 'woman']:
            health_service.update_user_profile(user_id, {'gender': 'female'})
            self.send_message(chat_id, "–û—Ç–ª–∏—á–Ω–æ! –°–∫–æ–ª—å–∫–æ –≤–∞–º –ª–µ—Ç? (–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ)")
        else:
            self.send_message(chat_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ '–ú—É–∂—Å–∫–æ–π' –∏–ª–∏ '–ñ–µ–Ω—Å–∫–∏–π'")
        return {'status': 'success'}
    
    def _handle_age_input(self, health_service, user_id: int, chat_id: int, text: str) -> Dict:
        try:
            age = int(text.strip())
            if 10 <= age <= 120:
                health_service.update_user_profile(user_id, {'age': age})
                self.send_message(chat_id, "–û—Ç–ª–∏—á–Ω–æ! –ö–∞–∫–æ–π —É –≤–∞—Å —Ä–æ—Å—Ç –≤ —Å–∞–Ω—Ç–∏–º–µ—Ç—Ä–∞—Ö? (–Ω–∞–ø—Ä–∏–º–µ—Ä, 175)")
            else:
                self.send_message(chat_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç –æ—Ç 10 –¥–æ 120 –ª–µ—Ç")
        except ValueError:
            self.send_message(chat_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–∑—Ä–∞—Å—Ç —á–∏—Å–ª–æ–º")
        return {'status': 'success'}
    
    def _handle_height_input(self, health_service, user_id: int, chat_id: int, text: str) -> Dict:
        try:
            height = int(text.strip())
            if 100 <= height <= 250:
                health_service.update_user_profile(user_id, {'height_cm': height})
                self.send_message(chat_id, "–ü–æ–Ω—è—Ç–Ω–æ! –ö–∞–∫–æ–π —É –≤–∞—Å —Ç–µ–∫—É—â–∏–π –≤–µ—Å –≤ –∫–∏–ª–æ–≥—Ä–∞–º–º–∞—Ö? (–Ω–∞–ø—Ä–∏–º–µ—Ä, 70.5)")
            else:
                self.send_message(chat_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ä–æ—Å—Ç –æ—Ç 100 –¥–æ 250 —Å–º")
        except ValueError:
            self.send_message(chat_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à —Ä–æ—Å—Ç –≤ —Å–∞–Ω—Ç–∏–º–µ—Ç—Ä–∞—Ö —á–∏—Å–ª–æ–º")
        return {'status': 'success'}
    
    def _handle_current_weight_input(self, health_service, user_id: int, chat_id: int, text: str) -> Dict:
        try:
            weight = float(text.strip())
            if 30 <= weight <= 300:
                health_service.update_user_profile(user_id, {'current_weight_kg': weight})
                self.send_message(chat_id, """–ö–∞–∫–æ–≤–∞ –≤–∞—à–∞ –æ—Å–Ω–æ–≤–Ω–∞—è —Ü–µ–ª—å?

1. –°–±—Ä–æ—Å–∏—Ç—å –≤–µ—Å - –£–º–µ–Ω—å—à–∏—Ç—å –º–∞—Å—Å—É —Ç–µ–ª–∞
2. –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å –≤–µ—Å - –û—Å—Ç–∞–≤–∞—Ç—å—Å—è –Ω–∞ —Ç–µ–∫—É—â–µ–º –≤–µ—Å–µ
3. –ù–∞–±—Ä–∞—Ç—å –≤–µ—Å - –£–≤–µ–ª–∏—á–∏—Ç—å –º–∞—Å—Å—É —Ç–µ–ª–∞

–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–≤–µ—Ç—å—Ç–µ: –°–±—Ä–æ—Å–∏—Ç—å, –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å –∏–ª–∏ –ù–∞–±—Ä–∞—Ç—å""")
            else:
                self.send_message(chat_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–µ—Å –æ—Ç 30 –¥–æ 300 –∫–≥")
        except ValueError:
            self.send_message(chat_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–µ—Å —á–∏—Å–ª–æ–º \\(–Ω–∞–ø—Ä–∏–º–µ—Ä, 70\\.5\\)")
        return {'status': 'success'}
    
    def _handle_goal_input(self, health_service, user_id: int, chat_id: int, text: str) -> Dict:
        """Handle goal input - now sends buttons instead of asking for text"""
        message = """–ö–∞–∫–æ–≤–∞ –≤–∞—à–∞ –æ—Å–Ω–æ–≤–Ω–∞—è —Ü–µ–ª—å?

1. –°–±—Ä–æ—Å–∏—Ç—å –≤–µ—Å - –£–º–µ–Ω—å—à–∏—Ç—å –º–∞—Å—Å—É —Ç–µ–ª–∞
2. –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å –≤–µ—Å - –û—Å—Ç–∞–≤–∞—Ç—å—Å—è –Ω–∞ —Ç–µ–∫—É—â–µ–º –≤–µ—Å–µ  
3. –ù–∞–±—Ä–∞—Ç—å –≤–µ—Å - –£–≤–µ–ª–∏—á–∏—Ç—å –º–∞—Å—Å—É —Ç–µ–ª–∞

–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É —Ü–µ–ª—å:"""
        
        keyboard = [
            [{'text': '1Ô∏è‚É£ –°–±—Ä–æ—Å–∏—Ç—å –≤–µ—Å', 'callback_data': 'onboarding_goal_lose'}],
            [{'text': '2Ô∏è‚É£ –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å –≤–µ—Å', 'callback_data': 'onboarding_goal_maintain'}],
            [{'text': '3Ô∏è‚É£ –ù–∞–±—Ä–∞—Ç—å –≤–µ—Å', 'callback_data': 'onboarding_goal_gain'}]
        ]
        
        self.send_message_with_keyboard(chat_id, message, keyboard)
        return {'status': 'success'}
    
    def _handle_target_weight_input(self, health_service, user_id: int, chat_id: int, text: str) -> Dict:
        try:
            target_weight = float(text.strip())
            if 30 <= target_weight <= 300:
                health_service.update_user_profile(user_id, {'target_weight_kg': target_weight})
                
                message = """–ö–∞–∫–æ–π —É –≤–∞—Å —É—Ä–æ–≤–µ–Ω—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏?

1. –ú–∞–ª–æ–ø–æ–¥–≤–∏–∂–Ω—ã–π ‚Äì –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ —Ñ–∏–∑–∏—á–µ—Å–∫–∏–µ –Ω–∞–≥—Ä—É–∑–∫–∏
2. –£–º–µ—Ä–µ–Ω–Ω—ã–π - –õ–µ–≥–∫–∏–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è 1-3 —Ä–∞–∑–∞ –≤ –Ω–µ–¥–µ–ª—é
3. –ê–∫—Ç–∏–≤–Ω—ã–π - –£–º–µ—Ä–µ–Ω–Ω—ã–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è 3-5 —Ä–∞–∑ –≤ –Ω–µ–¥–µ–ª—é

–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à —É—Ä–æ–≤–µ–Ω—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏:"""
                
                keyboard = [
                    [{'text': '1Ô∏è‚É£ –ú–∞–ª–æ–ø–æ–¥–≤–∏–∂–Ω—ã–π', 'callback_data': 'onboarding_activity_sedentary'}],
                    [{'text': '2Ô∏è‚É£ –£–º–µ—Ä–µ–Ω–Ω—ã–π', 'callback_data': 'onboarding_activity_moderate'}],
                    [{'text': '3Ô∏è‚É£ –ê–∫—Ç–∏–≤–Ω—ã–π', 'callback_data': 'onboarding_activity_active'}]
                ]
                
                self.send_message_with_keyboard(chat_id, message, keyboard)
            else:
                self.send_message(chat_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ü–µ–ª–µ–≤–æ–π –≤–µ—Å –æ—Ç 30 –¥–æ 300 –∫–≥")
        except ValueError:
            self.send_message(chat_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à —Ü–µ–ª–µ–≤–æ–π –≤–µ—Å —á–∏—Å–ª–æ–º (–Ω–∞–ø—Ä–∏–º–µ—Ä, 65)")
        return {'status': 'success'}
    
    def _handle_activity_level_input(self, health_service, user_id: int, chat_id: int, text: str) -> Dict:
        activity_text = text.lower().strip()
        if activity_text in ['–º–∞–ª–æ–ø–æ–¥–≤–∏–∂–Ω—ã–π', '—Å–∏–¥—è—á–∏–π', 'sedentary', 'sed']:
            health_service.update_user_profile(user_id, {'activity_level': 'sedentary'})
        elif activity_text in ['—É–º–µ—Ä–µ–Ω–Ω—ã–π', 'moderate', 'mod']:
            health_service.update_user_profile(user_id, {'activity_level': 'moderate'})
        elif activity_text in ['–∞–∫—Ç–∏–≤–Ω—ã–π', 'active', 'act']:
            health_service.update_user_profile(user_id, {'activity_level': 'active'})
        else:
            self.send_message(chat_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–≤–µ—Ç—å—Ç–µ '–ú–∞–ª–æ–ø–æ–¥–≤–∏–∂–Ω—ã–π', '–£–º–µ—Ä–µ–Ω–Ω—ã–π' –∏–ª–∏ '–ê–∫—Ç–∏–≤–Ω—ã–π'")
            return {'status': 'success'}
        
        # Onboarding complete, calculate targets
        health_service.calculate_user_targets(user_id)
        self.send_message(chat_id, """üéâ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!

–í–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω –ø–∏—Ç–∞–Ω–∏—è –≥–æ—Ç–æ–≤! –Ø —Ä–∞—Å—Å—á–∏—Ç–∞–ª –≤–∞—à–∏ –¥–Ω–µ–≤–Ω—ã–µ –Ω–æ—Ä–º—ã –∫–∞–ª–æ—Ä–∏–π –∏ –º–∞–∫—Ä–æ–Ω—É—Ç—Ä–∏–µ–Ω—Ç–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–∞—à–∏—Ö —Ü–µ–ª–µ–π.

–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ:
üì∏ –û—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –ø—Ä–∏–µ–º–æ–≤ –ø–∏—â–∏ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –∑–∞–ø–∏—Å–∏
üìù –û–ø–∏—Å—ã–≤–∞—Ç—å –µ–¥—É —Ç–µ–∫—Å—Ç–æ–º
üìä –ü–æ–ª—É—á–∞—Ç—å –¥–Ω–µ–≤–Ω—ã–µ –æ—Ç—á–µ—Ç—ã —Å –ø–æ–º–æ—â—å—é /summary
üîó –ü–æ–¥–∫–ª—é—á–∞—Ç—å –Ω–æ—Å–∏–º—ã–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ —Å –ø–æ–º–æ—â—å—é /connect_wearable

–î–∞–≤–∞–π—Ç–µ –Ω–∞—á–Ω–µ–º –≤–∞—à –ø—É—Ç—å –∫ –∑–¥–æ—Ä–æ–≤—å—é! –û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –∏–ª–∏ –æ–ø–∏—Å–∞–Ω–∏–µ –≤–∞—à–µ–≥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –ø—Ä–∏–µ–º–∞ –ø–∏—â–∏.""")
        return {'status': 'success'}
    
    def _is_onboarding_complete(self, user_profile) -> bool:
        """Check if user onboarding is complete"""
        required_fields = [
            user_profile.gender,
            user_profile.age,
            user_profile.height_cm,
            user_profile.current_weight_kg,
            user_profile.goal,
            user_profile.target_weight_kg,
            user_profile.activity_level
        ]
        return all(field is not None for field in required_fields)
    
    def _get_file_info(self, file_id: str) -> Optional[Dict]:
        """Get file information from Telegram"""
        try:
            response = requests.get(f"{self.base_url}/getFile", params={'file_id': file_id})
            response.raise_for_status()
            return response.json().get('result')
        except Exception as e:
            logger.error(f"Error getting file info: {str(e)}")
            return None
    
    def send_message(self, chat_id: int, text: str, reply_markup: dict = None) -> bool:
        """
        Universal message sending function using Message Entities instead of parse_mode.
        """
        try:
            # Parse markdown to entities
            plain_text, entities = parse_markdown_to_entities(text)
            
            # Build payload
            payload = {
                'chat_id': chat_id,
                'text': plain_text
            }
            
            # Add entities if any
            if entities:
                payload['entities'] = entities
            
            # Add reply markup if provided
            if reply_markup:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ reply_markup —è–≤–ª—è–µ—Ç—Å—è —Å–ª–æ–≤–∞—Ä–µ–º
                if not isinstance(reply_markup, dict):
                    logger.error(f"Invalid reply_markup type: {type(reply_markup)}, value: {reply_markup}")
                    # –ù–µ –¥–æ–±–∞–≤–ª—è–µ–º –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π reply_markup
                else:
                    # Clean keyboard text to prevent formatting errors
                    if 'inline_keyboard' in reply_markup:
                        cleaned_keyboard = clean_keyboard_markup(reply_markup['inline_keyboard'])
                        payload['reply_markup'] = {'inline_keyboard': cleaned_keyboard}
                    else:
                        # –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ inline_keyboard, –ø–µ—Ä–µ–¥–∞–µ–º –∫–∞–∫ –µ—Å—Ç—å
                        payload['reply_markup'] = reply_markup
            
            # –õ–æ–≥–∏—Ä—É–µ–º payload –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π
            logger.debug(f"Telegram payload: {payload}")
            
            # Send message
            response = requests.post(f"{self.base_url}/sendMessage", json=payload)
            try:
                response.raise_for_status()
            except Exception as e:
                logger.error(f"Telegram API error: {response.text}")
                raise
            return True
            
        except Exception as e:
            # –õ–æ–≥–∏—Ä—É–µ–º –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –æ—à–∏–±–∫–∏
            if hasattr(e, 'response') and e.response is not None:
                logger.error(f"Error sending message: {str(e)} | Response: {e.response.text}")
            else:
                logger.error(f"Error sending message: {str(e)}")
            return False
    
    def send_ai_message(self, chat_id: int, text: str) -> bool:
        """
        Send AI-generated message with automatic markdown parsing.
        
        Args:
            chat_id: Telegram chat ID
            text: AI-generated text (can contain markdown formatting)
            
        Returns:
            bool: True if message sent successfully, False otherwise
        """
        return self.send_message(chat_id, text)
    
    def set_webhook(self, webhook_url: str) -> Dict:
        """Set Telegram webhook URL"""
        try:
            payload = {
                'url': webhook_url,
                'allowed_updates': ['message', 'callback_query']
            }
            
            response = requests.post(f"{self.base_url}/setWebhook", json=payload)
            response.raise_for_status()
            
            return response.json()
            
        except Exception as e:
            logger.error(f"Error setting webhook: {str(e)}")
            raise
    
    # ===== NAVIGATION METHODS =====
    
    def _process_callback_query(self, callback_query: Dict) -> Dict:
        """Process callback query"""
        try:
            callback_data = callback_query.get('data', '')
            user_id = callback_query['from']['id']
            chat_id = callback_query['message']['chat']['id']
            message_id = callback_query['message']['message_id']
            logger.debug(f"Processing callback query: {callback_data}")
            self._answer_callback_query(callback_query['id'])

            # –ù–æ–≤—ã–π —Ä–æ—É—Ç–∏–Ω–≥ –ø–æ —Ñ–æ—Ä–º–∞—Ç—É prefix:action:id[:payload]
            parts = callback_data.split(':')
            if len(parts) == 1:
                # –ö–æ—Ä–æ—Ç–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã (–≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∏ —Ç.–¥.)
                if callback_data == 'main_menu':
                    return self._handle_main_menu_callback(user_id, chat_id, message_id)
                elif callback_data == 'food_log':
                    return self._handle_food_log_callback(user_id, chat_id, message_id)
                elif callback_data == 'photo_analysis':
                    return self._handle_photo_analysis_callback(user_id, chat_id, message_id)
                elif callback_data == 'nutrition_question':
                    return self._handle_nutrition_question_callback(user_id, chat_id, message_id)
                elif callback_data == 'summary':
                    return self._handle_summary_callback(user_id, chat_id, message_id)
                elif callback_data == 'statistics':
                    return self._handle_statistics_callback(user_id, chat_id, message_id)
                elif callback_data == 'help':
                    return self._handle_help_callback(user_id, chat_id, message_id)
                elif callback_data == 'profile':
                    return self._handle_profile_callback(user_id, chat_id, message_id)
                elif callback_data == 'settings':
                    return self._handle_settings_callback(user_id, chat_id, message_id)
                elif callback_data == 'support':
                    return self._handle_support_callback(user_id, chat_id, message_id)
                elif callback_data == 'weekly_summary':
                    return self._handle_weekly_summary_callback(user_id, chat_id, message_id)
                elif callback_data == 'start_onboarding':
                    return self._handle_start_onboarding_callback(user_id, chat_id, message_id)
                elif callback_data == 'back_to_main':
                    return self._handle_back_to_main_callback(user_id, chat_id, message_id)
                elif callback_data == 'stats_today':
                    return self._handle_stats_today_callback(user_id, chat_id, message_id)
                elif callback_data == 'stats_week':
                    return self._handle_stats_week_callback(user_id, chat_id, message_id)
                elif callback_data == 'stats_month':
                    return self._handle_stats_month_callback(user_id, chat_id, message_id)
                elif callback_data == 'stats_progress':
                    return self._handle_stats_progress_callback(user_id, chat_id, message_id)
                elif callback_data == 'onboarding_goal_lose':
                    return self._handle_onboarding_goal_callback(user_id, chat_id, message_id, 'lose_weight')
                elif callback_data == 'onboarding_goal_maintain':
                    return self._handle_onboarding_goal_callback(user_id, chat_id, message_id, 'maintain_weight')
                elif callback_data == 'onboarding_goal_gain':
                    return self._handle_onboarding_goal_callback(user_id, chat_id, message_id, 'gain_weight')
                elif callback_data == 'onboarding_activity_sedentary':
                    return self._handle_onboarding_activity_callback(user_id, chat_id, message_id, 'sedentary')
                elif callback_data == 'onboarding_activity_moderate':
                    return self._handle_onboarding_activity_callback(user_id, chat_id, message_id, 'moderate')
                elif callback_data == 'onboarding_activity_active':
                    return self._handle_onboarding_activity_callback(user_id, chat_id, message_id, 'active')
                # ... –¥—Ä—É–≥–∏–µ –∫–æ—Ä–æ—Ç–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã ...
                else:
                    logger.warning(f"Unknown callback data: {callback_data}")
                    return {'status': 'ignored', 'reason': 'Unknown callback data'}
            else:
                prefix = parts[0]
                action = parts[1] if len(parts) > 1 else None
                obj_id = parts[2] if len(parts) > 2 else None
                payload = parts[3] if len(parts) > 3 else None
                # –ï–¥–∞: food:options:<id>, food:delete:<id>, food:edit_field:<id>:<field>
                if prefix == 'food':
                    if action == 'options':
                        return self._handle_food_edit_callback(user_id, chat_id, message_id, obj_id)
                    elif action == 'delete':
                        return self._handle_food_delete_callback(user_id, chat_id, message_id, obj_id)
                    elif action == 'edit_field':
                        return self._handle_food_edit_field_callback(user_id, chat_id, message_id, obj_id, payload)
                # –ù–∞–≤–∏–≥–∞—Ü–∏—è: nav:back:<target>
                elif prefix == 'nav' and action == 'back':
                    # –ù–∞–ø—Ä–∏–º–µ—Ä, nav:back:settings_edit_food
                    if obj_id == 'settings_edit_food':
                        return self._handle_settings_edit_food_callback(user_id, chat_id, message_id)
                    elif obj_id == 'settings':
                        return self._handle_settings_callback(user_id, chat_id, message_id)
                    # ... –¥—Ä—É–≥–∏–µ –≤–æ–∑–≤—Ä–∞—Ç—ã ...
                # –ù–∞—Å—Ç—Ä–æ–π–∫–∏: settings:action
                elif prefix == 'settings':
                    if action == 'goal':
                        return self._handle_settings_goal_callback(user_id, chat_id, message_id)
                    elif action == 'reports_time':
                        return self._handle_settings_reports_time_callback(user_id, chat_id, message_id)
                    elif action == 'reset':
                        return self._handle_settings_reset_callback(user_id, chat_id, message_id)
                    elif action == 'edit_food':
                        return self._handle_settings_edit_food_callback(user_id, chat_id, message_id)
                    elif action == 'reset_confirm':
                        return self._handle_settings_reset_confirm_callback(user_id, chat_id, message_id)
                    elif action == 'reset_cancel':
                        return self._handle_settings_reset_cancel_callback(user_id, chat_id, message_id)
                # ... –¥—Ä—É–≥–∏–µ –∫–∞—Å—Ç–æ–º–Ω—ã–µ —Ä–æ—É—Ç—ã ...
                logger.warning(f"Unknown structured callback data: {callback_data}")
                return {'status': 'ignored', 'reason': 'Unknown structured callback data'}
        except Exception as e:
            logger.error(f"Error processing callback query: {str(e)}")
            return {'status': 'error', 'error': str(e)}
    
    def _answer_callback_query(self, callback_query_id: str, text: str = None) -> bool:
        """Answer callback query to remove loading state"""
        try:
            payload = {'callback_query_id': callback_query_id}
            if text:
                payload['text'] = text
            
            response = requests.post(f"{self.base_url}/answerCallbackQuery", json=payload)
            response.raise_for_status()
            return True
            
        except Exception as e:
            logger.error(f"Error answering callback query: {str(e)}")
            return False
    
    def send_message_with_keyboard(self, chat_id: int, text: str, keyboard: list) -> bool:
        """Send message with inline keyboard using new entity system"""
        try:
            # –õ–æ–≥–∏—Ä—É–µ–º –∏—Å—Ö–æ–¥–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
            logger.debug(f"Original keyboard: {keyboard}")
            
            # Clean keyboard text
            cleaned_keyboard = clean_keyboard_markup(keyboard)
            logger.debug(f"Cleaned keyboard: {cleaned_keyboard}")
            
            # –°–æ–∑–¥–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É reply_markup
            reply_markup = {'inline_keyboard': cleaned_keyboard}
            logger.debug(f"Reply markup: {reply_markup}")
            
            return self.send_message(chat_id, text, reply_markup)
        except Exception as e:
            logger.error(f"Error sending message with keyboard: {str(e)}")
            return False
    
    def edit_message_with_keyboard(self, chat_id: int, message_id: int, text: str, keyboard: list) -> bool:
        """Edit message with inline keyboard using new entity system"""
        try:
            # Parse markdown to entities
            plain_text, entities = parse_markdown_to_entities(text)
            
            # Clean keyboard text
            cleaned_keyboard = clean_keyboard_markup(keyboard)
            
            # Build payload
            payload = {
                'chat_id': chat_id,
                'message_id': message_id,
                'text': plain_text,
                'reply_markup': {
                    'inline_keyboard': cleaned_keyboard
                }
            }
            
            # Add entities if any
            if entities:
                payload['entities'] = entities
            
            # Debug logging
            logger.debug(f"Editing message payload: {payload}")
            
            response = requests.post(f"{self.base_url}/editMessageText", json=payload)
            
            if not response.ok:
                logger.error(f"Telegram API error: {response.status_code} - {response.text}")
                logger.error(f"Payload was: {payload}")
            
            response.raise_for_status()
            return True
            
        except Exception as e:
            logger.error(f"Error editing message with keyboard: {str(e)}")
            logger.error(f"Chat ID: {chat_id}, Message ID: {message_id}, Text: {text[:100]}...")
            return False
    
    def _get_main_menu_keyboard(self) -> list:
        """Get main menu keyboard"""
        return [
            [
                {'text': 'üçΩÔ∏è –ó–∞–ø–∏—Å–∞—Ç—å –µ–¥—É', 'callback_data': 'food_log'},
                {'text': 'üì∏ –ê–Ω–∞–ª–∏–∑ —Ñ–æ—Ç–æ', 'callback_data': 'photo_analysis'}
            ],
            [
                {'text': 'üìä –î–Ω–µ–≤–Ω–∞—è —Å–≤–æ–¥–∫–∞', 'callback_data': 'summary'},
                {'text': 'üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', 'callback_data': 'statistics'}
            ],
            [
                {'text': '‚ùì –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å', 'callback_data': 'nutrition_question'},
                {'text': 'üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å', 'callback_data': 'profile'}
            ],
            [
                {'text': 'üîó –ü–æ–¥–∫–ª—é—á–∏—Ç—å —Ç—Ä–µ–∫–µ—Ä', 'callback_data': 'connect_wearable'},
                {'text': '‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏', 'callback_data': 'settings'}
            ],
            [
                {'text': '‚ÑπÔ∏è –ü–æ–º–æ—â—å', 'callback_data': 'help'},
                {'text': 'üìû –ü–æ–¥–¥–µ—Ä–∂–∫–∞', 'callback_data': 'support'}
            ]
        ]
    
    def _get_back_keyboard(self) -> list:
        """Get back to main menu keyboard"""
        return [
            [{'text': 'üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é', 'callback_data': 'back_to_main'}]
        ]
    
    def _handle_main_menu_callback(self, user_id: int, chat_id: int, message_id: int) -> Dict:
        """Handle main menu callback"""
        try:
            return self.send_main_menu_message(chat_id, user_id, message_id)
        except Exception as e:
            logger.error(f"Error handling main menu callback: {str(e)}")
            return {'status': 'error', 'error': str(e)}
    
    def _handle_food_log_callback(self, user_id: int, chat_id: int, message_id: int) -> Dict:
        """Handle food log callback"""
        try:
            message = """üçΩÔ∏è –ó–∞–ø–∏—Å—å –µ–¥—ã

–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ:
‚Ä¢ –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –≤–∞—à–µ–π –µ–¥—ã
‚Ä¢ –¢–µ–∫—Å—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "–∫—É—Ä–∏–Ω–∞—è –≥—Ä—É–¥–∫–∞ 200–≥")

–Ø –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É—é –ø–∏—Ç–∞—Ç–µ–ª—å–Ω—É—é —Ü–µ–Ω–Ω–æ—Å—Ç—å –∏ –∑–∞–ø–∏—à—É –≤ –≤–∞—à –¥–Ω–µ–≤–Ω–∏–∫."""
            
            keyboard = self._get_back_keyboard()
            self.edit_message_with_keyboard(chat_id, message_id, message, keyboard)
            return {'status': 'success', 'action': 'food_log_instructions_shown'}
            
        except Exception as e:
            logger.error(f"Error handling food log callback: {str(e)}")
            return {'status': 'error', 'error': str(e)}
    
    def _handle_nutrition_question_callback(self, user_id: int, chat_id: int, message_id: int) -> Dict:
        """Handle nutrition question callback"""
        try:
            message = """‚ùì –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –æ –ø–∏—Ç–∞–Ω–∏–∏

–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å, –∏ —è –¥–∞–º –ø–æ–¥—Ä–æ–±–Ω—ã–π –æ—Ç–≤–µ—Ç —Å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏.

–ü—Ä–∏–º–µ—Ä—ã –≤–æ–ø—Ä–æ—Å–æ–≤:
‚Ä¢ "–ö–∞–∫–∏–µ –ø—Ä–æ–¥—É–∫—Ç—ã –±–æ–≥–∞—Ç—ã –±–µ–ª–∫–æ–º?"
‚Ä¢ "–ö–∞–∫ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –ø–∏—Ç–∞—Ç—å—Å—è –¥–ª—è –ø–æ—Ö—É–¥–µ–Ω–∏—è?"
‚Ä¢ "–°–∫–æ–ª—å–∫–æ –≤–æ–¥—ã –Ω—É–∂–Ω–æ –ø–∏—Ç—å –≤ –¥–µ–Ω—å?"
‚Ä¢ "–ß—Ç–æ –µ—Å—Ç—å –ø–µ—Ä–µ–¥ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–æ–π?"""
            
            keyboard = self._get_back_keyboard()
            self.edit_message_with_keyboard(chat_id, message_id, message, keyboard)
            return {'status': 'success', 'action': 'nutrition_question_instructions_shown'}
            
        except Exception as e:
            logger.error(f"Error handling nutrition question callback: {str(e)}")
            return {'status': 'error', 'error': str(e)}
    
    def _handle_summary_callback(self, user_id: int, chat_id: int, message_id: int) -> Dict:
        """Handle summary callback"""
        db = None
        try:
            db = next(get_db())
            health_service = HealthService(db)
            user_profile = health_service.get_user_profile(user_id)
            
            if not user_profile:
                message = "‚ùå –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –°–Ω–∞—á–∞–ª–∞ –∑–∞–≤–µ—Ä—à–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫—É."
                keyboard = self._get_back_keyboard()
                self.edit_message_with_keyboard(chat_id, message_id, message, keyboard)
                return {'status': 'error', 'reason': 'Profile not found'}
            
            # Get daily summary using new universal function
            summary_data = health_service.generate_report(user_id, 'daily')
            
            if not summary_data:
                message = "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
                keyboard = self._get_back_keyboard()
                self.edit_message_with_keyboard(chat_id, message_id, message, keyboard)
                return {'status': 'error', 'reason': 'No data available'}
            
            # Generate AI report
            report = self.openai_service.generate_report(summary_data, 'daily')
            
            # Combine report and options in one message
            message = f"üìä *–î–Ω–µ–≤–Ω–æ–π –æ—Ç—á–µ—Ç*\n\n{report}\n\n–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–ø—Ü–∏–∏:"
            
            keyboard = [
                [
                    {'text': 'üìà –ù–µ–¥–µ–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç', 'callback_data': 'weekly_summary'}
                ],
                [
                    {'text': 'üéØ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'callback_data': 'main_menu'}
                ]
            ]
            
            self.edit_message_with_keyboard(chat_id, message_id, message, keyboard)
            return {'status': 'success', 'summary': summary_data}
            
        except Exception as e:
            logger.error(f"Error handling summary callback: {str(e)}")
            message = "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            keyboard = self._get_back_keyboard()
            self.edit_message_with_keyboard(chat_id, message_id, message, keyboard)
            return {'status': 'error', 'error': str(e)}
        finally:
            # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
            if db:
                db.close()
    
    def _handle_help_callback(self, user_id: int, chat_id: int, message_id: int) -> Dict:
        """Handle help callback"""
        try:
            message = """‚ÑπÔ∏è –ü–æ–º–æ—â—å

ü§ñ Vector-Health AI Nutritionist - –≤–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ò–ò-–Ω—É—Ç—Ä–∏—Ü–∏–æ–ª–æ–≥

üìã –ß—Ç–æ —É–º–µ–µ—Ç –±–æ—Ç:
‚Ä¢ üçΩÔ∏è –ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –µ–¥—É –ø–æ —Ñ–æ—Ç–æ –∏ –æ–ø–∏—Å–∞–Ω–∏—é
‚Ä¢ üìä –í–µ—Å—Ç–∏ –¥–Ω–µ–≤–Ω–∏–∫ –ø–∏—Ç–∞–Ω–∏—è
‚Ä¢ ‚ùì –û—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –æ –ø–∏—Ç–∞–Ω–∏–∏
‚Ä¢ üìà –°–æ–∑–¥–∞–≤–∞—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –æ—Ç—á–µ—Ç—ã
‚Ä¢ üîó –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å—Å—è —Å —Ñ–∏—Ç–Ω–µ—Å-—Ç—Ä–µ–∫–µ—Ä–∞–º–∏

üí° –ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:
‚Ä¢ –û—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ —Ñ–æ—Ç–æ –µ–¥—ã –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
‚Ä¢ –û–ø–∏—Å—ã–≤–∞–π—Ç–µ –µ–¥—É —Ç–µ–∫—Å—Ç–æ–º
‚Ä¢ –ó–∞–¥–∞–≤–∞–π—Ç–µ –ª—é–±—ã–µ –≤–æ–ø—Ä–æ—Å—ã –æ –ø–∏—Ç–∞–Ω–∏–∏
‚Ä¢ –ü–æ–ª—É—á–∞–π—Ç–µ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –æ—Ç—á–µ—Ç—ã

üïê –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –æ—Ç—á–µ—Ç—ã –æ—Ç–ø—Ä–∞–≤–ª—è—é—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤ 20:00

üìû –ü–æ–¥–¥–µ—Ä–∂–∫–∞: @support_username"""
            
            keyboard = self._get_back_keyboard()
            self.edit_message_with_keyboard(chat_id, message_id, message, keyboard)
            return {'status': 'success', 'action': 'help_shown'}
            
        except Exception as e:
            logger.error(f"Error handling help callback: {str(e)}")
            return {'status': 'error', 'error': str(e)}
    
    def _handle_connect_wearable_callback(self, user_id: int, chat_id: int, message_id: int) -> Dict:
        """Handle connect wearable callback"""
        try:
            db = next(get_db())
            health_service = HealthService(db)
            user_profile = health_service.get_user_profile(user_id)
            
            if not user_profile:
                message = "‚ùå –°–Ω–∞—á–∞–ª–∞ –∑–∞–≤–µ—Ä—à–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫—É –ø—Ä–æ—Ñ–∏–ª—è."
                keyboard = self._get_back_keyboard()
                self.edit_message_with_keyboard(chat_id, message_id, message, keyboard)
                return {'status': 'error', 'reason': 'Profile not found'}
            
            # Generate Terra auth URL
            auth_url = self.terra_service.generate_auth_url(user_id)
            
            message = f"""üîó –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Ñ–∏—Ç–Ω–µ—Å-—Ç—Ä–µ–∫–µ—Ä–∞

–ü–æ–¥–∫–ª—é—á–∏—Ç–µ –≤–∞—à —Ñ–∏—Ç–Ω–µ—Å-—Ç—Ä–µ–∫–µ—Ä –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏:

üì± –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞:
‚Ä¢ Garmin
‚Ä¢ Fitbit
‚Ä¢ Oura Ring
‚Ä¢ Withings
‚Ä¢ Apple Health
‚Ä¢ Google Fit

üîó –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:"""
            
            keyboard = [
                [{'text': 'üîó –ü–æ–¥–∫–ª—é—á–∏—Ç—å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ', 'url': auth_url}],
                [{'text': 'üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é', 'callback_data': 'back_to_main'}]
            ]
            
            self.edit_message_with_keyboard(chat_id, message_id, message, keyboard)
            return {'status': 'success', 'action': 'wearable_connect_shown'}
            
        except Exception as e:
            logger.error(f"Error handling connect wearable callback: {str(e)}")
            return {'status': 'error', 'error': str(e)}
    
    def _handle_profile_callback(self, user_id: int, chat_id: int, message_id: int) -> Dict:
        """Handle profile callback"""
        try:
            db = next(get_db())
            health_service = HealthService(db)
            user_profile = health_service.get_user_profile(user_id)
            
            if not user_profile:
                message = "‚ùå –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –°–Ω–∞—á–∞–ª–∞ –∑–∞–≤–µ—Ä—à–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫—É."
                keyboard = self._get_back_keyboard()
                self.edit_message_with_keyboard(chat_id, message_id, message, keyboard)
                return {'status': 'error', 'reason': 'Profile not found'}
            
            message = f"""üë§ –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å

üìä –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:
‚Ä¢ –¶–µ–ª—å: {user_profile.goal.replace('_', ' ').title()}
‚Ä¢ –í–æ–∑—Ä–∞—Å—Ç: {user_profile.age} –ª–µ—Ç
‚Ä¢ –†–æ—Å—Ç: {user_profile.height_cm} —Å–º
‚Ä¢ –¢–µ–∫—É—â–∏–π –≤–µ—Å: {user_profile.current_weight_kg} –∫–≥
‚Ä¢ –¶–µ–ª–µ–≤–æ–π –≤–µ—Å: {user_profile.target_weight_kg} –∫–≥
‚Ä¢ –£—Ä–æ–≤–µ–Ω—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: {user_profile.activity_level.replace('_', ' ').title()}

üéØ –î–Ω–µ–≤–Ω—ã–µ –Ω–æ—Ä–º—ã:
‚Ä¢ –ö–∞–ª–æ—Ä–∏–∏: {user_profile.daily_calorie_target} –∫–∫–∞–ª
‚Ä¢ –ë–µ–ª–∫–∏: {user_profile.daily_protein_target_g} –≥
‚Ä¢ –ñ–∏—Ä—ã: {user_profile.daily_fat_target_g} –≥
‚Ä¢ –£–≥–ª–µ–≤–æ–¥—ã: {user_profile.daily_carbs_target_g} –≥

üìÖ –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {user_profile.created_at.strftime('%d.%m.%Y')}"""
            
            keyboard = self._get_back_keyboard()
            self.edit_message_with_keyboard(chat_id, message_id, message, keyboard)
            return {'status': 'success', 'action': 'profile_shown'}
            
        except Exception as e:
            logger.error(f"Error handling profile callback: {str(e)}")
            return {'status': 'error', 'error': str(e)}
    
    def _handle_back_to_main_callback(self, user_id: int, chat_id: int, message_id: int) -> Dict:
        """Handle back to main menu callback"""
        return self._handle_main_menu_callback(user_id, chat_id, message_id)

    def _handle_photo_analysis_callback(self, user_id: int, chat_id: int, message_id: int) -> Dict:
        """Handle photo analysis callback"""
        try:
            message = """üì∏ *–ê–Ω–∞–ª–∏–∑ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –µ–¥—ã*

–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –≤–∞—à–µ–≥–æ –ø—Ä–∏–µ–º–∞ –ø–∏—â–∏, –∏ —è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏:

üîç *–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É—é:*
‚Ä¢ –ù–∞–∑–≤–∞–Ω–∏–µ –±–ª—é–¥–∞
‚Ä¢ –ö–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç—å
‚Ä¢ –°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –±–µ–ª–∫–æ–≤, –∂–∏—Ä–æ–≤, —É–≥–ª–µ–≤–æ–¥–æ–≤
‚Ä¢ –ü—Ä–∏–º–µ—Ä–Ω—ã–π –≤–µ—Å –ø–æ—Ä—Ü–∏–∏
‚Ä¢ –°–ø–∏—Å–æ–∫ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤

üìä *–ó–∞–ø–∏—à—É –≤ –≤–∞—à –¥–Ω–µ–≤–Ω–∏–∫ –ø–∏—Ç–∞–Ω–∏—è*

üí° *–°–æ–≤–µ—Ç—ã –¥–ª—è –ª—É—á—à–µ–≥–æ –∞–Ω–∞–ª–∏–∑–∞:*
‚Ä¢ –°–Ω–∏–º–∞–π—Ç–µ –µ–¥—É –ø—Ä–∏ —Ö–æ—Ä–æ—à–µ–º –æ—Å–≤–µ—â–µ–Ω–∏–∏
‚Ä¢ –°—Ç–∞—Ä–∞–π—Ç–µ—Å—å, —á—Ç–æ–±—ã –±–ª—é–¥–æ –∑–∞–Ω–∏–º–∞–ª–æ –±–æ–ª—å—à—É—é —á–∞—Å—Ç—å –∫–∞–¥—Ä–∞
‚Ä¢ –ò–∑–±–µ–≥–∞–π—Ç–µ —Ä–∞–∑–º—ã—Ç—ã—Ö —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π"""
            
            keyboard = self._get_back_keyboard()
            self.edit_message_with_keyboard(chat_id, message_id, message, keyboard)
            return {'status': 'success', 'action': 'photo_analysis_instructions_shown'}
            
        except Exception as e:
            logger.error(f"Error handling photo analysis callback: {str(e)}")
            return {'status': 'error', 'error': str(e)}
    
    def _handle_statistics_callback(self, user_id: int, chat_id: int, message_id: int) -> Dict:
        """Handle statistics callback"""
        try:
            db = next(get_db())
            health_service = HealthService(db)
            user_profile = health_service.get_user_profile(user_id)
            
            if not user_profile:
                message = "‚ùå *–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω*\\n\\n–°–Ω–∞—á–∞–ª–∞ –∑–∞–≤–µ—Ä—à–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫—É –ø—Ä–æ—Ñ–∏–ª—è."
                keyboard = [[{'text': 'üöÄ –ù–∞—á–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫—É', 'callback_data': 'start_onboarding'}]]
                self.edit_message_with_keyboard(chat_id, message_id, message, keyboard)
                return {'status': 'error', 'reason': 'Profile not found'}
            
            # Get basic statistics
            from datetime import date, timedelta
            today = date.today()
            
            # Calculate weekly statistics
            total_entries = 0
            total_calories = 0
            days_with_data = 0
            
            for i in range(7):
                check_date = today - timedelta(days=i)
                day_data = health_service.get_daily_summary(user_id, check_date)
                if day_data.get('total_entries', 0) > 0:
                    total_entries += day_data.get('total_entries', 0)
                    total_calories += day_data.get('total_calories', 0)
                    days_with_data += 1
            
            avg_calories = total_calories / 7 if days_with_data > 0 else 0
            goal_achievement = (avg_calories / user_profile.daily_calorie_target * 100) if user_profile.daily_calorie_target > 0 else 0
            
            message = f"""üìà *–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞*

üìä *–ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π:*
‚Ä¢ –ó–∞–ø–∏—Å–µ–π –µ–¥—ã: {total_entries}
‚Ä¢ –°—Ä–µ–¥–Ω–∏–µ –∫–∞–ª–æ—Ä–∏–∏ –≤ –¥–µ–Ω—å: {avg_calories:.0f} –∫–∫–∞–ª
‚Ä¢ –î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ —Ü–µ–ª–∏: {goal_achievement:.1f}%

üéØ *–í–∞—à–∏ —Ü–µ–ª–∏:*
‚Ä¢ –¶–µ–ª—å: {user_profile.goal.replace('_', ' ').title()}
‚Ä¢ –¢–µ–∫—É—â–∏–π –≤–µ—Å: {user_profile.current_weight_kg} –∫–≥
‚Ä¢ –¶–µ–ª–µ–≤–æ–π –≤–µ—Å: {user_profile.target_weight_kg} –∫–≥

–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:"""
            
            keyboard = [
                [
                    {'text': 'üìÖ –°–µ–≥–æ–¥–Ω—è', 'callback_data': 'stats_today'},
                    {'text': 'üìä –ù–µ–¥–µ–ª—è', 'callback_data': 'stats_week'}
                ],
                [
                    {'text': 'üìà –ú–µ—Å—è—Ü', 'callback_data': 'stats_month'},
                    {'text': 'üìã –ü—Ä–æ–≥—Ä–µ—Å—Å', 'callback_data': 'stats_progress'}
                ],
                [{'text': 'üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é', 'callback_data': 'back_to_main'}]
            ]
            
            self.edit_message_with_keyboard(chat_id, message_id, message, keyboard)
            return {'status': 'success', 'action': 'statistics_shown'}
            
        except Exception as e:
            logger.error(f"Error handling statistics callback: {str(e)}")
            return {'status': 'error', 'error': str(e)}
        finally:
            # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
            if db:
                db.close()
    
    def _handle_settings_callback(self, user_id: int, chat_id: int, message_id: int) -> Dict:
        """Handle settings callback"""
        try:
            db = next(get_db())
            health_service = HealthService(db)
            user_profile = health_service.get_user_profile(user_id)
            
            if not user_profile:
                message = "‚ùå *–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω*\\n\\n–°–Ω–∞—á–∞–ª–∞ –∑–∞–≤–µ—Ä—à–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫—É –ø—Ä–æ—Ñ–∏–ª—è."
                keyboard = [[{'text': 'üöÄ –ù–∞—á–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫—É', 'callback_data': 'start_onboarding'}]]
                self.edit_message_with_keyboard(chat_id, message_id, message, keyboard)
                return {'status': 'error', 'reason': 'Profile not found'}
            
            # Format report time for display
            report_time_display = "–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ"
            if user_profile.daily_report_time:
                report_time_display = user_profile.daily_report_time.strftime("%H:%M")
            
            message = f"""‚öôÔ∏è *–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è*

üë§ *–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:*
‚Ä¢ –¶–µ–ª—å: {user_profile.goal.replace('_', ' ').title() if user_profile.goal else '–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞'}
‚Ä¢ –î–Ω–µ–≤–Ω–∞—è –Ω–æ—Ä–º–∞: {user_profile.daily_calorie_target or '–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞'} –∫–∫–∞–ª
‚Ä¢ –í—Ä–µ–º—è –æ—Ç—á—ë—Ç–∞: {report_time_display}

–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å:"""
            
            keyboard = [
                [
                    {'text': '–ò–∑–º–µ–Ω–∏—Ç—å —Ü–µ–ª—å', 'callback_data': 'settings:goal'},
                    {'text': '–í—Ä–µ–º—è –æ—Ç—á—ë—Ç–∞', 'callback_data': 'settings:reports_time'}
                ],
                [
                    {'text': '–°–±—Ä–æ—Å–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å', 'callback_data': 'settings:reset'},
                    {'text': '–ò–∑–º–µ–Ω–∏—Ç—å –ø—Ä–∏—ë–º –ø–∏—â–∏', 'callback_data': 'settings:edit_food'}
                ],
                [{'text': 'üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é', 'callback_data': 'back_to_main'}]
            ]
            
            self.edit_message_with_keyboard(chat_id, message_id, message, keyboard)
            return {'status': 'success', 'action': 'settings_shown'}
            
        except Exception as e:
            logger.error(f"Error handling settings callback: {str(e)}")
            return {'status': 'error', 'error': str(e)}
    
    def _handle_support_callback(self, user_id: int, chat_id: int, message_id: int) -> Dict:
        """Handle support callback"""
        try:
            message = """üìû *–ü–æ–¥–¥–µ—Ä–∂–∫–∞*

–ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã, –º—ã –≥–æ—Ç–æ–≤—ã –ø–æ–º–æ—á—å!

üí¨ *–°–ø–æ—Å–æ–±—ã —Å–≤—è–∑–∏:*
‚Ä¢ Telegram: @support_username
‚Ä¢ Email: support@vector-health.com
‚Ä¢ –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: 24/7

‚ùì *–ß–∞—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã:*
‚Ä¢ –ö–∞–∫ –∏–∑–º–µ–Ω–∏—Ç—å —Ü–µ–ª—å?
‚Ä¢ –ü–æ—á–µ–º—É –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –∞–Ω–∞–ª–∏–∑ —Ñ–æ—Ç–æ?
‚Ä¢ –ö–∞–∫ –ø–æ–¥–∫–ª—é—á–∏—Ç—å —Ç—Ä–µ–∫–µ—Ä?

üîß *–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞:*
‚Ä¢ –ü—Ä–æ–±–ª–µ–º—ã —Å –±–æ—Ç–æ–º
‚Ä¢ –û—à–∏–±–∫–∏ –≤ –æ—Ç—á–µ—Ç–∞—Ö
‚Ä¢ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π

–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–º–æ—â–∏:"""
            
            keyboard = [
                [
                    {'text': '‚ùì FAQ', 'callback_data': 'support_faq'},
                    {'text': 'üîß –¢–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞', 'callback_data': 'support_tech'}
                ],
                [
                    {'text': 'üí¨ –ù–∞–ø–∏—Å–∞—Ç—å –≤ —á–∞—Ç', 'callback_data': 'support_chat'},
                    {'text': 'üìß Email', 'callback_data': 'support_email'}
                ],
                [{'text': 'üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é', 'callback_data': 'back_to_main'}]
            ]
            
            self.edit_message_with_keyboard(chat_id, message_id, message, keyboard)
            return {'status': 'success', 'action': 'support_shown'}
            
        except Exception as e:
            logger.error(f"Error handling support callback: {str(e)}")
            return {'status': 'error', 'error': str(e)}
    
    def _handle_weekly_summary_callback(self, user_id: int, chat_id: int, message_id: int) -> Dict:
        """Handle weekly summary callback"""
        db = None
        try:
            db = next(get_db())
            health_service = HealthService(db)
            user_profile = health_service.get_user_profile(user_id)
            
            if not user_profile:
                message = "‚ùå *–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω*\\n\\n–°–Ω–∞—á–∞–ª–∞ –∑–∞–≤–µ—Ä—à–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫—É –ø—Ä–æ—Ñ–∏–ª—è."
                keyboard = [[{'text': 'üöÄ –ù–∞—á–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫—É', 'callback_data': 'start_onboarding'}]]
                self.edit_message_with_keyboard(chat_id, message_id, message, keyboard)
                return {'status': 'error', 'reason': 'Profile not found'}
            
            # Get weekly summary using new universal function
            summary_data = health_service.generate_report(user_id, 'weekly')
            
            if not summary_data:
                message = "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
                keyboard = self._get_back_keyboard()
                self.edit_message_with_keyboard(chat_id, message_id, message, keyboard)
                return {'status': 'error', 'reason': 'No data available'}
            
            # Generate AI report
            report = self.openai_service.generate_report(summary_data, 'weekly')
            
            # Combine report and options in one message
            message = f"üìà *–ù–µ–¥–µ–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç*\n\n{report}\n\n–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–ø—Ü–∏–∏:"
            
            keyboard = [
                [
                    {'text': 'üìä –î–Ω–µ–≤–Ω–æ–π –æ—Ç—á–µ—Ç', 'callback_data': 'summary'}
                ],
                [
                    {'text': 'üéØ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'callback_data': 'main_menu'}
                ]
            ]
            
            self.edit_message_with_keyboard(chat_id, message_id, message, keyboard)
            return {'status': 'success', 'summary': summary_data}
            
        except Exception as e:
            logger.error(f"Error handling weekly summary callback: {str(e)}")
            message = "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            keyboard = self._get_back_keyboard()
            self.edit_message_with_keyboard(chat_id, message_id, message, keyboard)
            return {'status': 'error', 'error': str(e)}
        finally:
            if db:
                db.close()
    

    
    def _handle_start_onboarding_callback(self, user_id: int, chat_id: int, message_id: int) -> Dict:
        """Handle start onboarding callback"""
        try:
            message = """üöÄ *–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è*

–î–∞–≤–∞–π—Ç–µ –Ω–∞—Å—Ç—Ä–æ–∏–º –≤–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å –¥–ª—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –≤–∞—à–∏—Ö —Ü–µ–ª–µ–π –≤ –æ–±–ª–∞—Å—Ç–∏ –∑–¥–æ—Ä–æ–≤—å—è.

üìã *–ß—Ç–æ –Ω–∞–º –ø–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è:*
‚Ä¢ –ü–æ–ª –∏ –≤–æ–∑—Ä–∞—Å—Ç
‚Ä¢ –†–æ—Å—Ç –∏ —Ç–µ–∫—É—â–∏–π –≤–µ—Å
‚Ä¢ –¶–µ–ª—å (–ø–æ—Ö—É–¥–µ–Ω–∏–µ/–ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ/–Ω–∞–±–æ—Ä –≤–µ—Å–∞)
‚Ä¢ –£—Ä–æ–≤–µ–Ω—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏

–ì–æ—Ç–æ–≤—ã –Ω–∞—á–∞—Ç—å? –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ."""
            
            keyboard = [
                [{'text': '‚úÖ –ù–∞—á–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫—É', 'callback_data': 'onboarding_gender'}],
                [{'text': 'üîô –ù–∞–∑–∞–¥', 'callback_data': 'back_to_main'}]
            ]
            
            self.edit_message_with_keyboard(chat_id, message_id, message, keyboard)
            return {'status': 'success', 'action': 'onboarding_started'}
            
        except Exception as e:
            logger.error(f"Error handling start onboarding callback: {str(e)}")
            return {'status': 'error', 'error': str(e)}
    
    # Help section callbacks
    def _handle_help_food_log_callback(self, user_id: int, chat_id: int, message_id: int) -> Dict:
        """Handle help food log callback"""
        try:
            message = """üçΩÔ∏è *–ó–∞–ø–∏—Å—å –µ–¥—ã - –ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è*

üì∏ *–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –µ–¥—ã:*
‚Ä¢ –°–Ω–∏–º–∞–π—Ç–µ –µ–¥—É –ø—Ä–∏ —Ö–æ—Ä–æ—à–µ–º –æ—Å–≤–µ—â–µ–Ω–∏–∏
‚Ä¢ –°—Ç–∞—Ä–∞–π—Ç–µ—Å—å, —á—Ç–æ–±—ã –±–ª—é–¥–æ –∑–∞–Ω–∏–º–∞–ª–æ –±–æ–ª—å—à—É—é —á–∞—Å—Ç—å –∫–∞–¥—Ä–∞
‚Ä¢ –ò–∑–±–µ–≥–∞–π—Ç–µ —Ä–∞–∑–º—ã—Ç—ã—Ö —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
‚Ä¢ –ú–æ–∂–Ω–æ —Å–Ω–∏–º–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –±–ª—é–¥ –Ω–∞ –æ–¥–Ω–æ–π —Ç–∞—Ä–µ–ª–∫–µ

üìù *–¢–µ–∫—Å—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ:*
‚Ä¢ –ë—É–¥—å—Ç–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã: "–∫—É—Ä–∏–Ω–∞—è –≥—Ä—É–¥–∫–∞ –Ω–∞ –≥—Ä–∏–ª–µ, 200–≥"
‚Ä¢ –£–∫–∞–∑—ã–≤–∞–π—Ç–µ —Å–ø–æ—Å–æ–± –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è: "–≤–∞—Ä–µ–Ω–∞—è", "–∂–∞—Ä–µ–Ω–∞—è", "–Ω–∞ –ø–∞—Ä—É"
‚Ä¢ –î–æ–±–∞–≤–ª—è–π—Ç–µ —Å–æ—É—Å—ã –∏ –¥–æ–±–∞–≤–∫–∏: "—Å –æ–ª–∏–≤–∫–æ–≤—ã–º –º–∞—Å–ª–æ–º", "—Å —Å–æ–ª—å—é"

üìä *–ß—Ç–æ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç—Å—è:*
‚Ä¢ –ù–∞–∑–≤–∞–Ω–∏–µ –±–ª—é–¥–∞
‚Ä¢ –ö–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç—å
‚Ä¢ –ë–µ–ª–∫–∏, –∂–∏—Ä—ã, —É–≥–ª–µ–≤–æ–¥—ã
‚Ä¢ –ü—Ä–∏–º–µ—Ä–Ω—ã–π –≤–µ—Å –ø–æ—Ä—Ü–∏–∏
‚Ä¢ –°–ø–∏—Å–æ–∫ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤

üí° *–°–æ–≤–µ—Ç—ã:*
‚Ä¢ –ó–∞–ø–∏—Å—ã–≤–∞–π—Ç–µ –µ–¥—É —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –ø—Ä–∏–µ–º–∞
‚Ä¢ –ù–µ –∑–∞–±—ã–≤–∞–π—Ç–µ –ø—Ä–æ –Ω–∞–ø–∏—Ç–∫–∏ –∏ –ø–µ—Ä–µ–∫—É—Å—ã
‚Ä¢ –£–∫–∞–∑—ã–≤–∞–π—Ç–µ —Ä–∞–∑–º–µ—Ä –ø–æ—Ä—Ü–∏–∏ –¥–ª—è —Ç–æ—á–Ω–æ—Å—Ç–∏"""
            
            keyboard = [
                [{'text': 'üì∏ –ü—Ä–∏–º–µ—Ä—ã —Ñ–æ—Ç–æ', 'callback_data': 'help_photo_examples'}],
                [{'text': 'üîô –ù–∞–∑–∞–¥ –∫ –ø–æ–º–æ—â–∏', 'callback_data': 'help'}]
            ]
            
            self.edit_message_with_keyboard(chat_id, message_id, message, keyboard)
            return {'status': 'success', 'action': 'help_food_log_shown'}
            
        except Exception as e:
            logger.error(f"Error handling help food log callback: {str(e)}")
            return {'status': 'error', 'error': str(e)}
    
    def _handle_help_reports_callback(self, user_id: int, chat_id: int, message_id: int) -> Dict:
        """Handle help reports callback"""
        try:
            message = """üìä *–û—Ç—á–µ—Ç—ã - –ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è*

üìà *–¢–∏–ø—ã –æ—Ç—á–µ—Ç–æ–≤:*
‚Ä¢ *–î–Ω–µ–≤–Ω–æ–π –æ—Ç—á–µ—Ç* - –∞–Ω–∞–ª–∏–∑ –ø–∏—Ç–∞–Ω–∏—è –∑–∞ –¥–µ–Ω—å
‚Ä¢ *–ù–µ–¥–µ–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç* - —Ç–µ–Ω–¥–µ–Ω—Ü–∏–∏ –∑–∞ –Ω–µ–¥–µ–ª—é


üìã *–ß—Ç–æ –≤–∫–ª—é—á–∞—é—Ç –æ—Ç—á–µ—Ç—ã:*
‚Ä¢ –û–±—â–µ–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ –∫–∞–ª–æ—Ä–∏–π
‚Ä¢ –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –º–∞–∫—Ä–æ–Ω—É—Ç—Ä–∏–µ–Ω—Ç–æ–≤
‚Ä¢ –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å –≤–∞—à–∏–º–∏ —Ü–µ–ª—è–º–∏
‚Ä¢ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é
‚Ä¢ –¢—Ä–µ–Ω–¥—ã –∏ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –ø–∏—Ç–∞–Ω–∏—è

‚è∞ *–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –æ—Ç—á–µ—Ç—ã:*
‚Ä¢ –í—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏: 20:00
‚Ä¢ –ú–æ–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö
‚Ä¢ –û—Ç–ø—Ä–∞–≤–ª—è—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏ –∑–∞–ø–∏—Å–µ–π –µ–¥—ã

üí° *–ö–∞–∫ –ø–æ–ª—É—á–∏—Ç—å –æ—Ç—á–µ—Ç:*
‚Ä¢ –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "üìä –î–Ω–µ–≤–Ω–∞—è —Å–≤–æ–¥–∫–∞"
‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /summary
‚Ä¢ –û—Ç—á–µ—Ç—ã –≥–µ–Ω–µ—Ä–∏—Ä—É—é—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏"""
            
            keyboard = [
                [{'text': 'üìä –ü–æ–ª—É—á–∏—Ç—å –æ—Ç—á–µ—Ç', 'callback_data': 'summary'}],
                [{'text': 'üîô –ù–∞–∑–∞–¥ –∫ –ø–æ–º–æ—â–∏', 'callback_data': 'help'}]
            ]
            
            self.edit_message_with_keyboard(chat_id, message_id, message, keyboard)
            return {'status': 'success', 'action': 'help_reports_shown'}
            
        except Exception as e:
            logger.error(f"Error handling help reports callback: {str(e)}")
            return {'status': 'error', 'error': str(e)}
    
    def _handle_help_questions_callback(self, user_id: int, chat_id: int, message_id: int) -> Dict:
        """Handle help questions callback"""
        try:
            message = """‚ùì *–í–æ–ø—Ä–æ—Å—ã –æ –ø–∏—Ç–∞–Ω–∏–∏ - –ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç*

ü§ñ *–ò–ò-–Ω—É—Ç—Ä–∏—Ü–∏–æ–ª–æ–≥:*
–Ø –∏—Å–ø–æ–ª—å–∑—É—é –ø–µ—Ä–µ–¥–æ–≤—ã–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞ –¥–ª—è –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –ø–æ –ø–∏—Ç–∞–Ω–∏—é.

üí¨ *–ü—Ä–∏–º–µ—Ä—ã –≤–æ–ø—Ä–æ—Å–æ–≤:*
‚Ä¢ "–ö–∞–∫–∏–µ –ø—Ä–æ–¥—É–∫—Ç—ã –±–æ–≥–∞—Ç—ã –±–µ–ª–∫–æ–º?"
‚Ä¢ "–ö–∞–∫ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –ø–∏—Ç–∞—Ç—å—Å—è –¥–ª—è –ø–æ—Ö—É–¥–µ–Ω–∏—è?"
‚Ä¢ "–°–∫–æ–ª—å–∫–æ –≤–æ–¥—ã –Ω—É–∂–Ω–æ –ø–∏—Ç—å –≤ –¥–µ–Ω—å?"
‚Ä¢ "–ß—Ç–æ –µ—Å—Ç—å –ø–µ—Ä–µ–¥ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–æ–π?"
‚Ä¢ "–ö–∞–∫ —É–ª—É—á—à–∏—Ç—å –º–æ–π —Ä–∞—Ü–∏–æ–Ω?"
‚Ä¢ "–ö–∞–∫–∏–µ –≤–∏—Ç–∞–º–∏–Ω—ã –º–Ω–µ –Ω—É–∂–Ω—ã?"

üìä *–ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏—è:*
‚Ä¢ –£—á–∏—Ç—ã–≤–∞—é –≤–∞—à–∏ —Ü–µ–ª–∏ –∏ –ø—Ä–æ—Ñ–∏–ª—å
‚Ä¢ –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –≤–∞—à–∏ –ø–∏—â–µ–≤—ã–µ –ø—Ä–∏–≤—ã—á–∫–∏
‚Ä¢ –î–∞—é —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–∞—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö
‚Ä¢ –£—á–∏—Ç—ã–≤–∞—é –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è

üí° *–°–æ–≤–µ—Ç—ã –¥–ª—è –ª—É—á—à–∏—Ö –æ—Ç–≤–µ—Ç–æ–≤:*
‚Ä¢ –ë—É–¥—å—Ç–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã –≤ –≤–æ–ø—Ä–æ—Å–∞—Ö
‚Ä¢ –£–∫–∞–∑—ã–≤–∞–π—Ç–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç (—Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏, –¥–∏–µ—Ç–∞, –∑–¥–æ—Ä–æ–≤—å–µ)
‚Ä¢ –ó–∞–¥–∞–≤–∞–π—Ç–µ —É—Ç–æ—á–Ω—è—é—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã
‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –≤–∞—à–µ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è"""
            
            keyboard = [
                [{'text': '‚ùì –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å', 'callback_data': 'nutrition_question'}],
                [{'text': 'üîô –ù–∞–∑–∞–¥ –∫ –ø–æ–º–æ—â–∏', 'callback_data': 'help'}]
            ]
            
            self.edit_message_with_keyboard(chat_id, message_id, message, keyboard)
            return {'status': 'success', 'action': 'help_questions_shown'}
            
        except Exception as e:
            logger.error(f"Error handling help questions callback: {str(e)}")
            return {'status': 'error', 'error': str(e)}
    
    def _handle_help_wearables_callback(self, user_id: int, chat_id: int, message_id: int) -> Dict:
        """Handle help wearables callback"""
        try:
            message = """üîó *–§–∏—Ç–Ω–µ—Å-—Ç—Ä–µ–∫–µ—Ä—ã - –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ*

üì± *–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞:*
‚Ä¢ **Garmin** - —á–∞—Å—ã –∏ —Ñ–∏—Ç–Ω–µ—Å-—Ç—Ä–µ–∫–µ—Ä—ã
‚Ä¢ **Fitbit** - –±—Ä–∞—Å–ª–µ—Ç—ã –∏ —á–∞—Å—ã
‚Ä¢ **Oura Ring** - —É–º–Ω–æ–µ –∫–æ–ª—å—Ü–æ
‚Ä¢ **Withings** - –≤–µ—Å—ã –∏ —Ç—Ä–µ–∫–µ—Ä—ã
‚Ä¢ **Apple Health** - –¥–∞–Ω–Ω—ã–µ —Å iPhone
‚Ä¢ **Google Fit** - –¥–∞–Ω–Ω—ã–µ —Å Android

üîÑ *–ß—Ç–æ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ—Ç—Å—è:*
‚Ä¢ –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∏ —à–∞–≥–∏
‚Ä¢ –°–æ–∂–∂–µ–Ω–Ω—ã–µ –∫–∞–ª–æ—Ä–∏–∏
‚Ä¢ –ö–∞—á–µ—Å—Ç–≤–æ —Å–Ω–∞
‚Ä¢ –ß–∞—Å—Ç–æ—Ç–∞ —Å–µ—Ä–¥–µ—á–Ω—ã—Ö —Å–æ–∫—Ä–∞—â–µ–Ω–∏–π
‚Ä¢ –í–µ—Å (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–æ)

üìä *–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:*
‚Ä¢ –ë–æ–ª–µ–µ —Ç–æ—á–Ω—ã–µ —Ä–∞—Å—á–µ—Ç—ã –∫–∞–ª–æ—Ä–∏–π
‚Ä¢ –£—á–µ—Ç —Ñ–∏–∑–∏—á–µ—Å–∫–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
‚Ä¢ –ê–Ω–∞–ª–∏–∑ —Å–Ω–∞ –∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
‚Ä¢ –ü–æ–ª–Ω–∞—è –∫–∞—Ä—Ç–∏–Ω–∞ –∑–¥–æ—Ä–æ–≤—å—è
‚Ä¢ –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏

üîí *–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å:*
‚Ä¢ –î–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–¥–∞—é—Ç—Å—è –ø–æ –∑–∞—â–∏—â–µ–Ω–Ω–æ–º—É —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—é
‚Ä¢ –ú—ã –Ω–µ —Ö—Ä–∞–Ω–∏–º –ø–∞—Ä–æ–ª–∏ –æ—Ç –≤–∞—à–∏—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤
‚Ä¢ –í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–∫–ª—é—á–∏—Ç—å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è
‚Ä¢ –°–æ–±–ª—é–¥–∞–µ–º –≤—Å–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç—ã –∑–∞—â–∏—Ç—ã –¥–∞–Ω–Ω—ã—Ö"""
            
            keyboard = [
                [{'text': 'üîó –ü–æ–¥–∫–ª—é—á–∏—Ç—å —Ç—Ä–µ–∫–µ—Ä', 'callback_data': 'connect_wearable'}],
                [{'text': 'üîô –ù–∞–∑–∞–¥ –∫ –ø–æ–º–æ—â–∏', 'callback_data': 'help'}]
            ]
            
            self.edit_message_with_keyboard(chat_id, message_id, message, keyboard)
            return {'status': 'success', 'action': 'help_wearables_shown'}
            
        except Exception as e:
            logger.error(f"Error handling help wearables callback: {str(e)}")
            return {'status': 'error', 'error': str(e)}
    
    def _handle_stats_today_callback(self, user_id: int, chat_id: int, message_id: int) -> Dict:
        """Handle today's statistics callback"""
        db = None
        try:
            db = next(get_db())
            health_service = HealthService(db)
            user_profile = health_service.get_user_profile(user_id)
            
            if not user_profile:
                message = "‚ùå *–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω*\\n\\n–°–Ω–∞—á–∞–ª–∞ –∑–∞–≤–µ—Ä—à–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫—É –ø—Ä–æ—Ñ–∏–ª—è."
                keyboard = [[{'text': 'üöÄ –ù–∞—á–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫—É', 'callback_data': 'start_onboarding'}]]
                self.edit_message_with_keyboard(chat_id, message_id, message, keyboard)
                return {'status': 'error', 'reason': 'Profile not found'}
            
            # Get today's data
            from datetime import date
            today = date.today()
            today_data = health_service.get_daily_summary(user_id, today)
            
            message = f"""üìÖ *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ —Å–µ–≥–æ–¥–Ω—è*

üçΩÔ∏è *–ü–∏—Ç–∞–Ω–∏–µ:*
‚Ä¢ –ó–∞–ø–∏—Å–µ–π –µ–¥—ã: {today_data.get('total_entries', 0)}
‚Ä¢ –û–±—â–∏–µ –∫–∞–ª–æ—Ä–∏–∏: {today_data.get('total_calories', 0):.0f} –∫–∫–∞–ª
‚Ä¢ –ë–µ–ª–∫–∏: {today_data.get('total_protein', 0):.1f}–≥
‚Ä¢ –ñ–∏—Ä—ã: {today_data.get('total_fat', 0):.1f}–≥
‚Ä¢ –£–≥–ª–µ–≤–æ–¥—ã: {today_data.get('total_carbs', 0):.1f}–≥

üéØ *–¶–µ–ª—å:*
‚Ä¢ –ù–æ—Ä–º–∞: {user_profile.daily_calorie_target} –∫–∫–∞–ª
‚Ä¢ –î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ: {(today_data.get('total_calories', 0) / user_profile.daily_calorie_target * 100):.1f}%"""
            
            keyboard = [
                [{'text': 'üìä –ù–µ–¥–µ–ª—è', 'callback_data': 'stats_week'}],
                [{'text': 'üìà –ú–µ—Å—è—Ü', 'callback_data': 'stats_month'}],
                [{'text': 'üîô –ù–∞–∑–∞–¥ –∫ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ', 'callback_data': 'statistics'}]
            ]
            
            self.edit_message_with_keyboard(chat_id, message_id, message, keyboard)
            return {'status': 'success', 'action': 'today_stats_shown'}
            
        except Exception as e:
            logger.error(f"Error handling today stats callback: {str(e)}")
            return {'status': 'error', 'error': str(e)}
        finally:
            if db:
                db.close()
    
    def _handle_stats_week_callback(self, user_id: int, chat_id: int, message_id: int) -> Dict:
        """Handle weekly statistics callback"""
        db = None
        try:
            db = next(get_db())
            health_service = HealthService(db)
            user_profile = health_service.get_user_profile(user_id)
            
            if not user_profile:
                message = "‚ùå *–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω*\\n\\n–°–Ω–∞—á–∞–ª–∞ –∑–∞–≤–µ—Ä—à–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫—É –ø—Ä–æ—Ñ–∏–ª—è."
                keyboard = [[{'text': 'üöÄ –ù–∞—á–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫—É', 'callback_data': 'start_onboarding'}]]
                self.edit_message_with_keyboard(chat_id, message_id, message, keyboard)
                return {'status': 'error', 'reason': 'Profile not found'}
            
            # Get weekly data
            from datetime import date, timedelta
            today = date.today()
            
            # Calculate weekly averages
            total_entries = 0
            total_calories = 0
            days_with_data = 0
            
            for i in range(7):
                check_date = today - timedelta(days=i)
                day_data = health_service.get_daily_summary(user_id, check_date)
                if day_data.get('total_entries', 0) > 0:
                    total_entries += day_data.get('total_entries', 0)
                    total_calories += day_data.get('total_calories', 0)
                    days_with_data += 1
            
            avg_calories = total_calories / 7 if days_with_data > 0 else 0
            
            message = f"""üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –Ω–µ–¥–µ–ª—é*

üìà *–û–±—â–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏:*
‚Ä¢ –î–Ω–µ–π —Å –∑–∞–ø–∏—Å—è–º–∏: {days_with_data}/7
‚Ä¢ –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: {total_entries}
‚Ä¢ –°—Ä–µ–¥–Ω–∏–µ –∫–∞–ª–æ—Ä–∏–∏ –≤ –¥–µ–Ω—å: {avg_calories:.0f} –∫–∫–∞–ª

üéØ *–î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ —Ü–µ–ª–∏:*
‚Ä¢ –°—Ä–µ–¥–Ω–µ–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ: {(avg_calories / user_profile.daily_calorie_target * 100):.1f}%"""
            
            keyboard = [
                [{'text': 'üìÖ –°–µ–≥–æ–¥–Ω—è', 'callback_data': 'stats_today'}],
                [{'text': 'üìà –ú–µ—Å—è—Ü', 'callback_data': 'stats_month'}],
                [{'text': 'üîô –ù–∞–∑–∞–¥ –∫ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ', 'callback_data': 'statistics'}]
            ]
            
            self.edit_message_with_keyboard(chat_id, message_id, message, keyboard)
            return {'status': 'success', 'action': 'week_stats_shown'}
            
        except Exception as e:
            logger.error(f"Error handling week stats callback: {str(e)}")
            return {'status': 'error', 'error': str(e)}
        finally:
            if db:
                db.close()
    
    def _handle_stats_month_callback(self, user_id: int, chat_id: int, message_id: int) -> Dict:
        """Handle monthly statistics callback"""
        db = None
        try:
            db = next(get_db())
            health_service = HealthService(db)
            user_profile = health_service.get_user_profile(user_id)
            
            if not user_profile:
                message = "‚ùå *–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω*\\n\\n–°–Ω–∞—á–∞–ª–∞ –∑–∞–≤–µ—Ä—à–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫—É –ø—Ä–æ—Ñ–∏–ª—è."
                keyboard = [[{'text': 'üöÄ –ù–∞—á–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫—É', 'callback_data': 'start_onboarding'}]]
                self.edit_message_with_keyboard(chat_id, message_id, message, keyboard)
                return {'status': 'error', 'reason': 'Profile not found'}
            
            # Get monthly data (last 30 days)
            from datetime import date, timedelta
            today = date.today()
            
            # Calculate monthly averages
            total_entries = 0
            total_calories = 0
            days_with_data = 0
            
            for i in range(30):
                check_date = today - timedelta(days=i)
                day_data = health_service.get_daily_summary(user_id, check_date)
                if day_data.get('total_entries', 0) > 0:
                    total_entries += day_data.get('total_entries', 0)
                    total_calories += day_data.get('total_calories', 0)
                    days_with_data += 1
            
            avg_calories = total_calories / 30 if days_with_data > 0 else 0
            consistency = (days_with_data / 30) * 100
            
            message = f"""üìà *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –º–µ—Å—è—Ü*

üìä *–û–±—â–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏:*
‚Ä¢ –î–Ω–µ–π —Å –∑–∞–ø–∏—Å—è–º–∏: {days_with_data}/30
‚Ä¢ –ö–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å: {consistency:.1f}%
‚Ä¢ –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: {total_entries}
‚Ä¢ –°—Ä–µ–¥–Ω–∏–µ –∫–∞–ª–æ—Ä–∏–∏ –≤ –¥–µ–Ω—å: {avg_calories:.0f} –∫–∫–∞–ª

üéØ *–î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ —Ü–µ–ª–∏:*
‚Ä¢ –°—Ä–µ–¥–Ω–µ–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ: {(avg_calories / user_profile.daily_calorie_target * 100):.1f}%"""
            
            keyboard = [
                [{'text': 'üìÖ –°–µ–≥–æ–¥–Ω—è', 'callback_data': 'stats_today'}],
                [{'text': 'üìä –ù–µ–¥–µ–ª—è', 'callback_data': 'stats_week'}],
                [{'text': 'üîô –ù–∞–∑–∞–¥ –∫ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ', 'callback_data': 'statistics'}]
            ]
            
            self.edit_message_with_keyboard(chat_id, message_id, message, keyboard)
            return {'status': 'success', 'action': 'month_stats_shown'}
            
        except Exception as e:
            logger.error(f"Error handling month stats callback: {str(e)}")
            return {'status': 'error', 'error': str(e)}
        finally:
            if db:
                db.close()
    
    def _handle_stats_progress_callback(self, user_id: int, chat_id: int, message_id: int) -> Dict:
        """Handle progress statistics callback"""
        db = None
        try:
            db = next(get_db())
            health_service = HealthService(db)
            user_profile = health_service.get_user_profile(user_id)
            
            if not user_profile:
                message = "‚ùå *–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω*\\n\\n–°–Ω–∞—á–∞–ª–∞ –∑–∞–≤–µ—Ä—à–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫—É –ø—Ä–æ—Ñ–∏–ª—è."
                keyboard = [[{'text': 'üöÄ –ù–∞—á–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫—É', 'callback_data': 'start_onboarding'}]]
                self.edit_message_with_keyboard(chat_id, message_id, message, keyboard)
                return {'status': 'error', 'reason': 'Profile not found'}
            
            # Calculate progress towards goal
            current_weight = user_profile.current_weight_kg
            target_weight = user_profile.target_weight_kg
            goal = user_profile.goal
            
            if goal == 'lose_weight':
                progress = ((current_weight - target_weight) / (current_weight - target_weight + 0.1)) * 100
            elif goal == 'gain_weight':
                progress = ((target_weight - current_weight) / (target_weight - current_weight + 0.1)) * 100
            else:  # maintain_weight
                progress = 100
            
            message = f"""üìã *–ü—Ä–æ–≥—Ä–µ—Å—Å –∫ —Ü–µ–ª–∏*

üéØ *–í–∞—à–∞ —Ü–µ–ª—å:*
‚Ä¢ {goal.replace('_', ' ').title()}
‚Ä¢ –¢–µ–∫—É—â–∏–π –≤–µ—Å: {current_weight} –∫–≥
‚Ä¢ –¶–µ–ª–µ–≤–æ–π –≤–µ—Å: {target_weight} –∫–≥
‚Ä¢ –ü—Ä–æ–≥—Ä–µ—Å—Å: {progress:.1f}%

üí™ *–°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:*
‚Ä¢ –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –≤–µ—Å—Ç–∏ –¥–Ω–µ–≤–Ω–∏–∫ –ø–∏—Ç–∞–Ω–∏—è
‚Ä¢ –°–ª–µ–¥–∏—Ç–µ –∑–∞ –∫–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç—å—é
‚Ä¢ –†–µ–≥—É–ª—è—Ä–Ω–æ –≤–∑–≤–µ—à–∏–≤–∞–π—Ç–µ—Å—å"""
            
            keyboard = [
                [{'text': 'üìÖ –°–µ–≥–æ–¥–Ω—è', 'callback_data': 'stats_today'}],
                [{'text': 'üìä –ù–µ–¥–µ–ª—è', 'callback_data': 'stats_week'}],
                [{'text': 'üîô –ù–∞–∑–∞–¥ –∫ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ', 'callback_data': 'statistics'}]
            ]
            
            self.edit_message_with_keyboard(chat_id, message_id, message, keyboard)
            return {'status': 'success', 'action': 'progress_stats_shown'}
            
        except Exception as e:
            logger.error(f"Error handling progress stats callback: {str(e)}")
            return {'status': 'error', 'error': str(e)}
        finally:
            if db:
                db.close()
    
    def send_message_with_main_menu_button(self, chat_id: int, text: str, inline_keyboard: list = None) -> bool:
        """Send message with inline keyboard and main menu button"""
        try:
            # Parse markdown to entities
            plain_text, entities = parse_markdown_to_entities(text)
            
            # Build payload
            payload = {
                'chat_id': chat_id,
                'text': plain_text
            }
            
            # Add entities if any
            if entities:
                payload['entities'] = entities
            
            # Build inline keyboard
            if inline_keyboard:
                cleaned_keyboard = clean_keyboard_markup(inline_keyboard)
                # Add main menu button to the keyboard
                cleaned_keyboard.append([{'text': 'üéØ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'callback_data': 'main_menu'}])
            else:
                # If no keyboard provided, create one with just main menu button
                cleaned_keyboard = [[{'text': 'üéØ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'callback_data': 'main_menu'}]]
            
            payload['reply_markup'] = {
                'inline_keyboard': cleaned_keyboard
            }
            
            # –õ–æ–≥–∏—Ä—É–µ–º payload –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π
            logger.debug(f"Telegram payload with main menu: {payload}")
            
            # Send message
            response = requests.post(f"{self.base_url}/sendMessage", json=payload)
            try:
                response.raise_for_status()
            except Exception as e:
                logger.error(f"Telegram API error: {response.text}")
                raise
            return True
            
        except Exception as e:
            # –õ–æ–≥–∏—Ä—É–µ–º –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –æ—à–∏–±–∫–∏
            if hasattr(e, 'response') and e.response is not None:
                logger.error(f"Error sending message with main menu: {str(e)} | Response: {e.response.text}")
            else:
                logger.error(f"Error sending message with main menu: {str(e)}")
            return False
    
    def _handle_main_menu_text(self, user_id: int, chat_id: int, user_profile) -> Dict:
        """Handle main menu button press"""
        try:
            return self.send_main_menu_message(chat_id, user_id)
        except Exception as e:
            logger.error(f"Error handling main menu text: {str(e)}")
            return {'status': 'error', 'error': str(e)}
    
    def send_main_menu_message(self, chat_id: int, user_id: int, message_id: int = None) -> Dict:
        """Send unified main menu message with full user profile"""
        db = None
        try:
            db = next(get_db())
            health_service = HealthService(db)
            user_profile = health_service.get_user_profile(user_id)
            
            if not user_profile or not self._is_onboarding_complete(user_profile):
                message = """üëã *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Vector-Health AI Nutritionist!*

–Ø –≤–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ò–ò-–Ω—É—Ç—Ä–∏—Ü–∏–æ–ª–æ–≥. –î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –Ω—É–∂–Ω–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å.

–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫—É."""
                keyboard = [[{'text': 'üöÄ –ù–∞—á–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫—É', 'callback_data': 'start_onboarding'}]]
            else:
                message = f"""üéØ *Vector-Health AI Nutritionist*

–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –Ø –≤–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ò–ò-–Ω—É—Ç—Ä–∏—Ü–∏–æ–ª–æ–≥.

üìä *–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:*
‚Ä¢ –¶–µ–ª—å: {user_profile.goal.replace('_', ' ').title()}
‚Ä¢ –î–Ω–µ–≤–Ω–∞—è –Ω–æ—Ä–º–∞: {user_profile.daily_calorie_target} –∫–∫–∞–ª
‚Ä¢ –ë–µ–ª–∫–∏: {user_profile.daily_protein_target_g}–≥ | –ñ–∏—Ä—ã: {user_profile.daily_fat_target_g}–≥ | –£–≥–ª–µ–≤–æ–¥—ã: {user_profile.daily_carbs_target_g}–≥

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"""
                keyboard = self._get_main_menu_keyboard()
            
            # Send or edit message based on whether message_id is provided
            if message_id:
                self.edit_message_with_keyboard(chat_id, message_id, message, keyboard)
            else:
                self.send_message_with_main_menu_button(chat_id, message, keyboard)
            
            return {'status': 'success', 'action': 'main_menu_shown'}
            
        except Exception as e:
            logger.error(f"Error sending main menu message: {str(e)}")
            return {'status': 'error', 'error': str(e)}
        finally:
            if db:
                db.close()

    def _handle_dialog_state(self, user_id: int, chat_id: int, text: str, current_state: str, user_profile) -> Dict:
        """Handle user input when in a dialog state"""
        db = None
        try:
            db = next(get_db())
            health_service = HealthService(db)
            
            if current_state == States.GOAL_CHANGE_CURRENT_WEIGHT:
                return self._handle_goal_change_current_weight(user_id, chat_id, text, health_service)
            elif current_state == States.GOAL_CHANGE_TARGET_WEIGHT:
                return self._handle_goal_change_target_weight(user_id, chat_id, text, health_service)
            elif current_state == States.REPORT_TIME_INPUT:
                return self._handle_report_time_input(user_id, chat_id, text, health_service)
            elif current_state.startswith('food_edit_'):
                return self._handle_food_edit_input(user_id, chat_id, text, current_state, health_service)
            else:
                # Unknown state, clear it and return to main menu
                state_manager.clear_state(user_id)
                return self.send_main_menu_message(chat_id, user_id)
                
        except Exception as e:
            logger.error(f"Error handling dialog state: {str(e)}")
            state_manager.clear_state(user_id)
            return {'status': 'error', 'error': str(e)}
        finally:
            if db:
                db.close()

    def _handle_settings_goal_callback(self, user_id: int, chat_id: int, message_id: int) -> Dict:
        """Handle goal change callback"""
        try:
            state_manager.set_state(user_id, States.GOAL_CHANGE_CURRENT_WEIGHT)
            message = "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à —Ç–µ–∫—É—â–∏–π –≤–µ—Å (–∫–≥):"
            keyboard = [[{'text': 'üîô –û—Ç–º–µ–Ω–∞', 'callback_data': 'back_to_main'}]]
            self.edit_message_with_keyboard(chat_id, message_id, message, keyboard)
            return {'status': 'success', 'action': 'goal_change_started'}
        except Exception as e:
            logger.error(f"Error handling goal change callback: {str(e)}")
            return {'status': 'error', 'error': str(e)}

    def _handle_settings_reports_time_callback(self, user_id: int, chat_id: int, message_id: int) -> Dict:
        """Handle report time change callback"""
        try:
            state_manager.set_state(user_id, States.REPORT_TIME_INPUT)
            message = "–í–≤–µ–¥–∏—Ç–µ –∂–µ–ª–∞–µ–º–æ–µ –≤—Ä–µ–º—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä, 21:00):"
            keyboard = [[{'text': 'üîô –û—Ç–º–µ–Ω–∞', 'callback_data': 'back_to_main'}]]
            self.edit_message_with_keyboard(chat_id, message_id, message, keyboard)
            return {'status': 'success', 'action': 'report_time_change_started'}
        except Exception as e:
            logger.error(f"Error handling report time callback: {str(e)}")
            return {'status': 'error', 'error': str(e)}

    def _handle_settings_reset_callback(self, user_id: int, chat_id: int, message_id: int) -> Dict:
        """Handle profile reset callback"""
        try:
            message = """‚ö†Ô∏è *–í–Ω–∏–º–∞–Ω–∏–µ!*

–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–±—Ä–æ—Å–∏—Ç—å —Å–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å? –í—Å–µ –≤–∞—à–∏ —Ü–µ–ª–∏ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã, –∏ –≤–∞–º –ø—Ä–∏–¥–µ—Ç—Å—è –ø—Ä–æ–π—Ç–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –∑–∞–Ω–æ–≤–æ. –î–∞–Ω–Ω—ã–µ –æ –ø—Ä–∏–µ–º–∞—Ö –ø–∏—â–∏ –∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –æ—Å—Ç–∞–Ω—É—Ç—Å—è."""
            
            keyboard = [
                [
                    {'text': '–î–∞, —Å–±—Ä–æ—Å–∏—Ç—å', 'callback_data': 'settings:reset_confirm'},
                    {'text': '–û—Ç–º–µ–Ω–∞', 'callback_data': 'settings:reset_cancel'}
                ]
            ]
            
            self.edit_message_with_keyboard(chat_id, message_id, message, keyboard)
            return {'status': 'success', 'action': 'reset_confirmation_shown'}
        except Exception as e:
            logger.error(f"Error handling reset callback: {str(e)}")
            return {'status': 'error', 'error': str(e)}

    def _handle_settings_reset_confirm_callback(self, user_id: int, chat_id: int, message_id: int) -> Dict:
        """Handle profile reset confirmation"""
        db = None
        try:
            db = next(get_db())
            health_service = HealthService(db)
            
            # Reset user profile (clear all fields except user_id and chat_id)
            reset_data = {
                'gender': None,
                'age': None,
                'height_cm': None,
                'current_weight_kg': None,
                'target_weight_kg': None,
                'goal': None,
                'activity_level': None,
                'bmr': None,
                'tdee': None,
                'daily_calorie_target': None,
                'daily_protein_target_g': None,
                'daily_fat_target_g': None,
                'daily_carbs_target_g': None,
                'daily_report_time': None,
                'terra_user_id': None
            }
            
            success = health_service.update_user_profile(user_id, reset_data)
            
            if success:
                message = "‚úÖ –ü—Ä–æ—Ñ–∏–ª—å —É—Å–ø–µ—à–Ω–æ —Å–±—Ä–æ—à–µ–Ω! –¢–µ–ø–µ—Ä—å –¥–∞–≤–∞–π—Ç–µ –Ω–∞—Å—Ç—Ä–æ–∏–º –µ–≥–æ –∑–∞–Ω–æ–≤–æ."
                keyboard = [[{'text': 'üöÄ –ù–∞—á–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫—É', 'callback_data': 'start_onboarding'}]]
            else:
                message = "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ –ø—Ä–æ—Ñ–∏–ª—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
                keyboard = [[{'text': 'üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é', 'callback_data': 'back_to_main'}]]
            
            self.edit_message_with_keyboard(chat_id, message_id, message, keyboard)
            return {'status': 'success', 'action': 'profile_reset'}
            
        except Exception as e:
            logger.error(f"Error handling reset confirm callback: {str(e)}")
            return {'status': 'error', 'error': str(e)}
        finally:
            if db:
                db.close()

    def _handle_settings_reset_cancel_callback(self, user_id: int, chat_id: int, message_id: int) -> Dict:
        """Handle profile reset cancellation"""
        try:
            return self._handle_settings_callback(user_id, chat_id, message_id)
        except Exception as e:
            logger.error(f"Error handling reset cancel callback: {str(e)}")
            return {'status': 'error', 'error': str(e)}

    def _handle_settings_edit_food_callback(self, user_id: int, chat_id: int, message_id: int) -> Dict:
        """Handle food edit callback"""
        db = None
        try:
            db = next(get_db())
            health_service = HealthService(db)
            # Get today's food logs
            today = date.today()
            food_logs = health_service.get_food_logs_for_date(user_id, today)
            if not food_logs:
                message = "üìù –£ –≤–∞—Å –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π –æ –ø—Ä–∏–µ–º–∞—Ö –ø–∏—â–∏ –∑–∞ —Å–µ–≥–æ–¥–Ω—è."
                keyboard = [[{'text': 'üîô –ù–∞–∑–∞–¥ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏', 'callback_data': 'nav:back:settings'}]]
                self.edit_message_with_keyboard(chat_id, message_id, message, keyboard)
                return {'status': 'success', 'action': 'no_food_logs_today'}
            message = "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏—ë–º –ø–∏—â–∏, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –∏–ª–∏ —É–¥–∞–ª–∏—Ç—å:"
            keyboard = []
            for food_log in food_logs:
                dish_name = food_log.dish_name[:20] + "..." if len(food_log.dish_name) > 20 else food_log.dish_name
                weight_text = f"{food_log.estimated_weight_g}–≥" if food_log.estimated_weight_g else "~–≥"
                button_text = f"{dish_name} - {food_log.calories} –∫–∫–∞–ª, {weight_text}"
                callback_data = f'food:options:{food_log.log_id}'
                keyboard.append([{'text': button_text, 'callback_data': callback_data}])
            keyboard.append([{'text': 'üîô –ù–∞–∑–∞–¥ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏', 'callback_data': 'nav:back:settings'}])
            self.edit_message_with_keyboard(chat_id, message_id, message, keyboard)
            return {'status': 'success', 'action': 'food_edit_list_shown'}
        except Exception as e:
            logger.error(f"Error handling food edit callback: {str(e)}")
            return {'status': 'error', 'error': str(e)}
        finally:
            if db:
                db.close()

    def _handle_food_edit_callback(self, user_id: int, chat_id: int, message_id: int, log_id: str) -> Dict:
        """Handle food edit selection (new format)"""
        try:
            message = "–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?"
            keyboard = [
                [
                    {'text': '–ò–∑–º–µ–Ω–∏—Ç—å', 'callback_data': f'food:edit_field:{log_id}:select'},
                    {'text': '–£–¥–∞–ª–∏—Ç—å', 'callback_data': f'food:delete:{log_id}'}
                ],
                [{'text': 'üîô –ù–∞–∑–∞–¥', 'callback_data': 'nav:back:settings_edit_food'}]
            ]
            self.edit_message_with_keyboard(chat_id, message_id, message, keyboard)
            return {'status': 'success', 'action': 'food_action_selection'}
        except Exception as e:
            logger.error(f"Error handling food edit callback: {str(e)}")
            return {'status': 'error', 'error': str(e)}

    def _handle_food_edit_field_callback(self, user_id: int, chat_id: int, message_id: int, log_id: str, field: str) -> Dict:
        """Handle food edit field selection (new format)"""
        try:
            if field == 'select':
                message = "–ö–∞–∫–æ–µ –ø–æ–ª–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å?"
                keyboard = [
                    [{'text': '–ö–∞–ª–æ—Ä–∏–∏', 'callback_data': f'food:edit_field:{log_id}:calories'}],
                    [{'text': '–í–µ—Å (–≥)', 'callback_data': f'food:edit_field:{log_id}:weight'}],
                    [{'text': '–ë–µ–ª–∫–∏ (–≥)', 'callback_data': f'food:edit_field:{log_id}:protein'}],
                    [{'text': '–ñ–∏—Ä—ã (–≥)', 'callback_data': f'food:edit_field:{log_id}:fat'}],
                    [{'text': '–£–≥–ª–µ–≤–æ–¥—ã (–≥)', 'callback_data': f'food:edit_field:{log_id}:carbs'}]
                ]
                keyboard.append([{'text': 'üîô –ù–∞–∑–∞–¥', 'callback_data': f'food:options:{log_id}'}])
                self.edit_message_with_keyboard(chat_id, message_id, message, keyboard)
                return {'status': 'success', 'action': 'food_edit_field_selection'}
            
            # Handle specific field selection
            field_state_map = {
                'calories': States.FOOD_EDIT_CALORIES,
                'weight': States.FOOD_EDIT_WEIGHT,
                'protein': States.FOOD_EDIT_PROTEIN,
                'fat': States.FOOD_EDIT_FAT,
                'carbs': States.FOOD_EDIT_CARBS
            }
            
            state = field_state_map.get(field)
            if not state:
                self.edit_message_with_keyboard(chat_id, message_id, "–û—à–∏–±–∫–∞: –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –ø–æ–ª–µ.", 
                                               [[{'text': 'üîô –ù–∞–∑–∞–¥', 'callback_data': f'food:options:{log_id}'}]])
                return {'status': 'error', 'error': 'Unknown field'}
            
            # Set state and store log_id
            state_manager.set_state(user_id, state)
            state_manager.update_state_data(user_id, {'log_id': log_id})
            
            # Get field display name
            field_names = {
                'calories': '–∫–∞–ª–æ—Ä–∏–π',
                'weight': '–≤–µ—Å–∞ (–≥)',
                'protein': '–±–µ–ª–∫–æ–≤ (–≥)',
                'fat': '–∂–∏—Ä–æ–≤ (–≥)',
                'carbs': '—É–≥–ª–µ–≤–æ–¥–æ–≤ (–≥)'
            }
            
            field_name = field_names.get(field, field)
            message = f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ {field_name}:"
            keyboard = [[{'text': 'üîô –û—Ç–º–µ–Ω–∞', 'callback_data': f'food:options:{log_id}'}]]
            
            self.edit_message_with_keyboard(chat_id, message_id, message, keyboard)
            return {'status': 'success', 'action': 'food_edit_started'}
            
        except Exception as e:
            logger.error(f"Error handling food edit field callback: {str(e)}")
            return {'status': 'error', 'error': str(e)}

    def _handle_food_delete_callback(self, user_id: int, chat_id: int, message_id: int, log_id: str) -> Dict:
        """Handle food deletion (new format)"""
        db = None
        try:
            db = next(get_db())
            health_service = HealthService(db)
            
            # Delete the food log
            success = health_service.delete_food_log(log_id)
            
            if success:
                message = "‚úÖ –ó–∞–ø–∏—Å—å –æ –ø—Ä–∏—ë–º–µ –ø–∏—â–∏ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞!"
            else:
                message = "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            
            keyboard = [[{'text': 'üîô –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É', 'callback_data': 'nav:back:settings_edit_food'}]]
            self.edit_message_with_keyboard(chat_id, message_id, message, keyboard)
            return {'status': 'success', 'action': 'food_deleted'}
            
        except Exception as e:
            logger.error(f"Error handling food delete callback: {str(e)}")
            return {'status': 'error', 'error': str(e)}
        finally:
            if db:
                db.close()

    def _handle_goal_change_current_weight(self, user_id: int, chat_id: int, text: str, health_service) -> Dict:
        """Handle current weight input for goal change"""
        try:
            weight = float(text.strip())
            if weight <= 0 or weight > 500:
                self.send_message(chat_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–µ—Å (–æ—Ç 1 –¥–æ 500 –∫–≥):")
                return {'status': 'success', 'action': 'invalid_weight'}
            
            # Store current weight and ask for target weight
            state_manager.set_state(user_id, States.GOAL_CHANGE_TARGET_WEIGHT, {'current_weight': weight})
            
            self.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –∂–µ–ª–∞–µ–º—ã–π –≤–µ—Å (–∫–≥):")
            return {'status': 'success', 'action': 'target_weight_requested'}
            
        except ValueError:
            self.send_message(chat_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 70.5):")
            return {'status': 'success', 'action': 'invalid_input'}
        except Exception as e:
            logger.error(f"Error handling current weight input: {str(e)}")
            state_manager.clear_state(user_id)
            return {'status': 'error', 'error': str(e)}

    def _handle_goal_change_target_weight(self, user_id: int, chat_id: int, text: str, health_service) -> Dict:
        """Handle target weight input for goal change"""
        try:
            target_weight = float(text.strip())
            if target_weight <= 0 or target_weight > 500:
                self.send_message(chat_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–µ—Å (–æ—Ç 1 –¥–æ 500 –∫–≥):")
                return {'status': 'success', 'action': 'invalid_weight'}
            
            # Get stored current weight
            state_data = state_manager.get_state_data(user_id)
            current_weight = state_data.get('current_weight')
            
            # Debug logging
            logger.info(f"Goal change target weight - User: {user_id}, State data: {state_data}, Current weight: {current_weight}")
            
            if not current_weight:
                self.send_message(chat_id, "–û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω —Ç–µ–∫—É—â–∏–π –≤–µ—Å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
                state_manager.clear_state(user_id)
                return {'status': 'error', 'error': 'Missing current weight'}
            
            # Update user profile
            updates = {
                'current_weight_kg': current_weight,
                'target_weight_kg': target_weight
            }
            
            success = health_service.update_user_profile(user_id, updates)
            
            if success:
                # Recalculate targets
                health_service.calculate_user_targets(user_id)
                
                # Get updated profile
                user_profile = health_service.get_user_profile(user_id)
                
                message = f"""‚úÖ *–¶–µ–ª–∏ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!*

üìä *–ù–æ–≤—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏:*
‚Ä¢ –¢–µ–∫—É—â–∏–π –≤–µ—Å: {current_weight} –∫–≥
‚Ä¢ –¶–µ–ª–µ–≤–æ–π –≤–µ—Å: {target_weight} –∫–≥
‚Ä¢ BMR: {user_profile.bmr} –∫–∫–∞–ª
‚Ä¢ TDEE: {user_profile.tdee} –∫–∫–∞–ª
‚Ä¢ –î–Ω–µ–≤–Ω–∞—è –Ω–æ—Ä–º–∞: {user_profile.daily_calorie_target} –∫–∫–∞–ª
‚Ä¢ –ë–µ–ª–∫–∏: {user_profile.daily_protein_target_g}–≥
‚Ä¢ –ñ–∏—Ä—ã: {user_profile.daily_fat_target_g}–≥
‚Ä¢ –£–≥–ª–µ–≤–æ–¥—ã: {user_profile.daily_carbs_target_g}–≥"""
                
                # Clear state and show main menu
                state_manager.clear_state(user_id)
                return self.send_main_menu_message(chat_id, user_id)
            else:
                self.send_message(chat_id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ü–µ–ª–µ–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
                state_manager.clear_state(user_id)
                return {'status': 'error', 'error': 'Failed to update goals'}
            
        except ValueError:
            self.send_message(chat_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 65.0):")
            return {'status': 'success', 'action': 'invalid_input'}
        except Exception as e:
            logger.error(f"Error handling target weight input: {str(e)}")
            state_manager.clear_state(user_id)
            return {'status': 'error', 'error': str(e)}

    def _handle_report_time_input(self, user_id: int, chat_id: int, text: str, health_service) -> Dict:
        """Handle report time input"""
        try:
            # Parse time input (HH:MM format)
            time_str = text.strip()
            
            # Validate time format
            try:
                hour, minute = map(int, time_str.split(':'))
                if not (0 <= hour <= 23 and 0 <= minute <= 59):
                    raise ValueError("Invalid time range")
                report_time = time(hour, minute)
            except (ValueError, TypeError):
                self.send_message(chat_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä, 21:00):")
                return {'status': 'success', 'action': 'invalid_time_format'}
            
            # Update user profile
            success = health_service.update_user_profile(user_id, {'daily_report_time': report_time})
            
            if success:
                message = f"‚úÖ –í—Ä–µ–º—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ {time_str} (–ú–°–ö)"
                state_manager.clear_state(user_id)
                return self.send_main_menu_message(chat_id, user_id)
            else:
                self.send_message(chat_id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –≤—Ä–µ–º–µ–Ω–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
                state_manager.clear_state(user_id)
                return {'status': 'error', 'error': 'Failed to update report time'}
            
        except Exception as e:
            logger.error(f"Error handling report time input: {str(e)}")
            state_manager.clear_state(user_id)
            return {'status': 'error', 'error': str(e)}

    def _handle_food_edit_input(self, user_id: int, chat_id: int, text: str, current_state: str, health_service) -> Dict:
        """Handle food edit input based on current state"""
        try:
            state_data = state_manager.get_state_data(user_id)
            log_id = state_data.get('log_id')
            
            if not log_id:
                self.send_message(chat_id, "–û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω ID –∑–∞–ø–∏—Å–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
                state_manager.clear_state(user_id)
                return {'status': 'error', 'error': 'Missing log_id'}
            
            # Parse the new value
            try:
                new_value = float(text.strip())
                if new_value < 0:
                    raise ValueError("Negative value")
            except ValueError:
                self.send_message(chat_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ:")
                return {'status': 'success', 'action': 'invalid_input'}
            
            # Determine which field to update based on state
            field_map = {
                States.FOOD_EDIT_CALORIES: 'calories',
                States.FOOD_EDIT_WEIGHT: 'estimated_weight_g',
                States.FOOD_EDIT_PROTEIN: 'protein_g',
                States.FOOD_EDIT_FAT: 'fat_g',
                States.FOOD_EDIT_CARBS: 'carbs_g'
            }
            
            field = field_map.get(current_state)
            if not field:
                self.send_message(chat_id, "–û—à–∏–±–∫–∞: –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –ø–æ–ª–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.")
                state_manager.clear_state(user_id)
                return {'status': 'error', 'error': 'Unknown edit field'}
            
            # Get current food log data for comparison
            current_food_log = health_service.get_food_log_by_id(log_id)
            if not current_food_log:
                self.send_message(chat_id, "–û—à–∏–±–∫–∞: –∑–∞–ø–∏—Å—å –æ –µ–¥–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
                state_manager.clear_state(user_id)
                return {'status': 'error', 'error': 'Food log not found'}
            
            # Update the food log
            success = health_service.update_food_log(log_id, {field: new_value})
            
            if success:
                # Get updated food log to show new values
                updated_food_log = health_service.get_food_log_by_id(log_id)
                
                # Get field display name for success message
                field_names = {
                    'calories': '–ö–∞–ª–æ—Ä–∏–∏',
                    'estimated_weight_g': '–í–µ—Å',
                    'protein_g': '–ë–µ–ª–∫–∏',
                    'fat_g': '–ñ–∏—Ä—ã',
                    'carbs_g': '–£–≥–ª–µ–≤–æ–¥—ã'
                }
                field_name = field_names.get(field, field)
                
                # Create success message
                if field == 'estimated_weight_g':
                    # Show recalculated nutrition values when weight is changed
                    message = f"""‚úÖ *–í–µ—Å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!*

üìä *–ù–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è:*
‚Ä¢ –í–µ—Å: {new_value}–≥ (–±—ã–ª–æ {float(current_food_log.estimated_weight_g)}–≥)
‚Ä¢ –ö–∞–ª–æ—Ä–∏–∏: {int(updated_food_log.calories)} –∫–∫–∞–ª (–±—ã–ª–æ {int(current_food_log.calories)} –∫–∫–∞–ª)
‚Ä¢ –ë–µ–ª–∫–∏: {float(updated_food_log.protein_g)}–≥ (–±—ã–ª–æ {float(current_food_log.protein_g)}–≥)
‚Ä¢ –ñ–∏—Ä—ã: {float(updated_food_log.fat_g)}–≥ (–±—ã–ª–æ {float(current_food_log.fat_g)}–≥)
‚Ä¢ –£–≥–ª–µ–≤–æ–¥—ã: {float(updated_food_log.carbs_g)}–≥ (–±—ã–ª–æ {float(current_food_log.carbs_g)}–≥)

üîÑ *–ó–Ω–∞—á–µ–Ω–∏—è –ø–µ—Ä–µ—Å—á–∏—Ç–∞–Ω—ã –ø—Ä–æ–ø–æ—Ä—Ü–∏–æ–Ω–∞–ª—å–Ω–æ –Ω–æ–≤–æ–º—É –≤–µ—Å—É*"""
                else:
                    # For other fields, show simple update message
                    message = f"‚úÖ {field_name} —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ {new_value}"
                
                state_manager.clear_state(user_id)
                return self.send_main_menu_message(chat_id, user_id)
            else:
                self.send_message(chat_id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
                state_manager.clear_state(user_id)
                return {'status': 'error', 'error': 'Failed to update food log'}
            
        except Exception as e:
            logger.error(f"Error handling food edit input: {str(e)}")
            state_manager.clear_state(user_id)
            return {'status': 'error', 'error': str(e)}

    def _handle_onboarding_goal_callback(self, user_id: int, chat_id: int, message_id: int, goal: str) -> Dict:
        """Handle goal selection during onboarding"""
        db = None
        try:
            db = next(get_db())
            health_service = HealthService(db)
            
            # Update user profile with selected goal
            health_service.update_user_profile(user_id, {'goal': goal})
            
            if goal == 'maintain_weight':
                # For maintain weight, set target = current weight and go to activity
                user_profile = health_service.get_user_profile(user_id)
                health_service.update_user_profile(user_id, {'target_weight_kg': user_profile.current_weight_kg})
                
                message = """–ö–∞–∫–æ–π —É –≤–∞—Å —É—Ä–æ–≤–µ–Ω—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏?

1. –ú–∞–ª–æ–ø–æ–¥–≤–∏–∂–Ω—ã–π ‚Äì –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ —Ñ–∏–∑–∏—á–µ—Å–∫–∏–µ –Ω–∞–≥—Ä—É–∑–∫–∏
2. –£–º–µ—Ä–µ–Ω–Ω—ã–π - –õ–µ–≥–∫–∏–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è 1-3 —Ä–∞–∑–∞ –≤ –Ω–µ–¥–µ–ª—é
3. –ê–∫—Ç–∏–≤–Ω—ã–π - –£–º–µ—Ä–µ–Ω–Ω—ã–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è 3-5 —Ä–∞–∑ –≤ –Ω–µ–¥–µ–ª—é

–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à —É—Ä–æ–≤–µ–Ω—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏:"""
                
                keyboard = [
                    [{'text': '1Ô∏è‚É£ –ú–∞–ª–æ–ø–æ–¥–≤–∏–∂–Ω—ã–π', 'callback_data': 'onboarding_activity_sedentary'}],
                    [{'text': '2Ô∏è‚É£ –£–º–µ—Ä–µ–Ω–Ω—ã–π', 'callback_data': 'onboarding_activity_moderate'}],
                    [{'text': '3Ô∏è‚É£ –ê–∫—Ç–∏–≤–Ω—ã–π', 'callback_data': 'onboarding_activity_active'}]
                ]
                
                self.edit_message_with_keyboard(chat_id, message_id, message, keyboard)
            else:
                # Ask for target weight
                message = "–ö–∞–∫–æ–π —É –≤–∞—Å —Ü–µ–ª–µ–≤–æ–π –≤–µ—Å –≤ –∫–∏–ª–æ–≥—Ä–∞–º–º–∞—Ö? (–Ω–∞–ø—Ä–∏–º–µ—Ä, 65)"
                self.edit_message_with_keyboard(chat_id, message_id, message, [])
            
            return {'status': 'success', 'goal': goal}
            
        except Exception as e:
            logger.error(f"Error handling onboarding goal callback: {str(e)}")
            return {'status': 'error', 'error': str(e)}
        finally:
            if db:
                db.close()

    def _handle_onboarding_activity_callback(self, user_id: int, chat_id: int, message_id: int, activity: str) -> Dict:
        """Handle activity level selection during onboarding"""
        db = None
        try:
            db = next(get_db())
            health_service = HealthService(db)
            
            # Update user profile with selected activity level
            health_service.update_user_profile(user_id, {'activity_level': activity})
            
            # Calculate user targets
            health_service.calculate_user_targets(user_id)
            
            # Get updated profile to show calculated values
            user_profile = health_service.get_user_profile(user_id)
            
            # Send completion message
            message = f"""üéâ *–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!*

–í–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω –ø–∏—Ç–∞–Ω–∏—è –≥–æ—Ç–æ–≤! –Ø —Ä–∞—Å—Å—á–∏—Ç–∞–ª –≤–∞—à–∏ –¥–Ω–µ–≤–Ω—ã–µ –Ω–æ—Ä–º—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–∞—à–∏—Ö —Ü–µ–ª–µ–π.

üìä *–í–∞—à–∏ –¥–Ω–µ–≤–Ω—ã–µ –Ω–æ—Ä–º—ã:*
‚Ä¢ –ö–∞–ª–æ—Ä–∏–∏: {user_profile.daily_calorie_target} –∫–∫–∞–ª
‚Ä¢ –ë–µ–ª–∫–∏: {user_profile.daily_protein_target_g}–≥
‚Ä¢ –ñ–∏—Ä—ã: {user_profile.daily_fat_target_g}–≥
‚Ä¢ –£–≥–ª–µ–≤–æ–¥—ã: {user_profile.daily_carbs_target_g}–≥

–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ:
üì∏ –û—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –ø—Ä–∏–µ–º–æ–≤ –ø–∏—â–∏ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –∑–∞–ø–∏—Å–∏
üìù –û–ø–∏—Å—ã–≤–∞—Ç—å –µ–¥—É —Ç–µ–∫—Å—Ç–æ–º
üìä –ü–æ–ª—É—á–∞—Ç—å –¥–Ω–µ–≤–Ω—ã–µ –æ—Ç—á–µ—Ç—ã —Å –ø–æ–º–æ—â—å—é /summary
üîó –ü–æ–¥–∫–ª—é—á–∞—Ç—å –Ω–æ—Å–∏–º—ã–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ —Å –ø–æ–º–æ—â—å—é /connect_wearable

–î–∞–≤–∞–π—Ç–µ –Ω–∞—á–Ω–µ–º –≤–∞—à –ø—É—Ç—å –∫ –∑–¥–æ—Ä–æ–≤—å—é! –û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –∏–ª–∏ –æ–ø–∏—Å–∞–Ω–∏–µ –≤–∞—à–µ–≥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –ø—Ä–∏–µ–º–∞ –ø–∏—â–∏."""
            
            keyboard = self._get_main_menu_keyboard()
            self.edit_message_with_keyboard(chat_id, message_id, message, keyboard)
            return {'status': 'success', 'activity': activity}
            
        except Exception as e:
            logger.error(f"Error handling onboarding activity callback: {str(e)}")
            return {'status': 'error', 'error': str(e)}
        finally:
            if db:
                db.close()